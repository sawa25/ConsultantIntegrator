[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 `wisper` \u0438 `vosk`. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0438\u0445 \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u0443\u0434\u0438\u043e \u0438 \u043d\u0430 \u0430\u0443\u0434\u0438\u043e \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0444\u043e\u043d\u043e\u0432\u043e\u0433\u043e \u0448\u0443\u043c\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 `noisereduce`. \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043a \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0443 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u0434\u043b\u044f \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u043b\u043e\u0432 `SpellChecker`.\n\n\n\n- \u041e\u0441\u043e\u0431\u043e\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0443\u0434\u0435\u043b\u0438\u043c \u0441\u0430\u043c\u044b\u043c \u043b\u0435\u0433\u043a\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044f\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0441\u043e \u0441\u043b\u0430\u0431\u044b\u043c\u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044f\u043c\u0438.  \n# \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\n#\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\n\n!pip install pydub\n\n!pip install noisereduce\n\n!pip install git+https://github.com/openai/whisper.git\n\n!pip3 install vosk\n\n!pip install pyspellchecker\n\n!pip install jiwer\n#\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u044b \u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438\n\nimport noisereduce as nr\n\nfrom spellchecker import SpellChecker\n\nimport soundfile as sf\n\nimport os\n\nimport whisper\n\nimport vosk\n\nimport wave\n\nfrom pydub import AudioSegment\n\nimport gdown\n\nimport re\n\nimport json\n\nimport string\n\n#Spellchecker\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 spellchecker, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043b\u043e\u0432\u0430.\n# \u041f\u0443\u0441\u0442\u044c \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n\ntext = '\u042f \u043f\u0438\u0447\u0430\u0442\u043e\u044e \u0441\u043b\u0438\u0448\u0448\u043a\u0430\u043c \u0431\u044b\u0441\u0440\u043e \u0438 \u043d\u0435\u0430\u043a\u0443\u0440\u0430\u0442\u043d\u043e!'\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 SpellChecker\n\nspell = SpellChecker(language='ru')\n# \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0441\u043b\u043e\u0432\u0430 \u0438 \u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f\n\nwords = re.findall(r'\\w+|[^\\w\\s]', text)\n\nwords\n# \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0438 \u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u044b\u0445, \u0431\u0443\u0434\u0435\u043c \u0438\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\n\nmisspelled = spell.unknown(words)\n\nmisspelled\n# \u0421\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u043b\u0438\u0431\u043e \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438, \u0435\u0441\u043b\u0438 \u0434\u043b\u044f \u043d\u0438\u0445 \u043d\u0435 \u043d\u0430\u0448\u043b\u043e\u0441\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\n\n# \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\nfor word in misspelled:\n\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0430\u043c\u043e\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435\n\n    correct = spell.correction(word)\n\n    print(f'{word} ---> {correct}')\n\n\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0447\u0430\u0441\u0442\u044c \u0441\u043b\u043e\u0432 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u043d\u043e, \u0447\u0430\u0441\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043b\u043e\u0432\u0430, \u0430 \u0434\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u043e\u043e\u0431\u0449\u0435 \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0442\u0438\u0441\u044c \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0437\u0430\u043c\u0435\u043d\u044b (None). \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c \u044d\u0442\u043e\u0442 \u0438\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u043f\u043e\u0441\u0442\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\n#WER\n\u0422\u0430\u043a\u0436\u0435 \u043e\u0447\u0435\u043d\u044c \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e\u043c \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430 WER.\n\n\n\n`WER (Word Error Rate)` \u2013 \u044d\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u043d\u0430\u044f \u043e\u0442 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0439 \u00ab\u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u041b\u0435\u0432\u0435\u043d\u0448\u0442\u0435\u0439\u043d\u0430\u00bb, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0441\u043b\u043e\u0432, \u0430 \u043d\u0435 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0444\u043e\u043d\u0435\u043c. \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u041b\u0435\u0432\u0435\u043d\u0448\u0442\u0435\u0439\u043d\u0430 \u2013 \u044d\u0442\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0438 \u0437\u0430\u043c\u0435\u043d\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0434\u0440\u0443\u0433\u0443\u044e.\n\n\n\n```\n\nWER \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u044c \u043a\u0430\u043a \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u044b\u0439 % \u041d\u0415\u0412\u0415\u0420\u041d\u042b\u0425 \u0441\u043b\u043e\u0432:\n\nWER 50% - \u043a\u0430\u0436\u0434\u043e\u0435 \u0432\u0442\u043e\u0440\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u043d\u0435\u0432\u0435\u0440\u043d\u043e\n\nWER 20% - \u043a\u0430\u0436\u0434\u043e\u0435 \u043f\u044f\u0442\u043e\u0435\n\n```\n\n\n\n\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0439\u0442\u0435 \u0442\u0430\u043a\u0436\u0435, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 STT \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u043e\u0433\u043b\u043e\u0442\u0438\u043b\u0430 \u043f\u0440\u0435\u0434\u043b\u043e\u0433 \u0438\u043b\u0438 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 \u0441\u043b\u043e\u0432\u043e \u043d\u0435 \u0432 \u0442\u043e\u0442 \u043f\u0430\u0434\u0435\u0436, \u0442\u043e \u0432 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 WER \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0448\u0442\u0440\u0430\u0444. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e WER \u0432\u044b\u0448\u0435, \u0447\u0435\u043c \u0434\u043b\u044f \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u043f\u0440\u0438 \u043f\u0440\u043e\u0447\u0438\u0445 \u0440\u0430\u0432\u043d\u044b\u0445.\n\n\n\n**\u0424\u043e\u0440\u043c\u0443\u043b\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 WER \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:**\n\n```\n\nWER = (S + D + I)/N, \u0433\u0434\u0435\n\nS \u2013 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0437\u0430\u043c\u0435\u043d\u044b \u0441\u043b\u043e\u0432\n\nD \u2013 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0432\n\nI \u2013 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0441\u043b\u043e\u0432\n\nN \u2013 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432\n\n```\nfrom jiwer import wer\n# \u041f\u0443\u0441\u0442\u044c \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n\ntext = '\u042f \u043f\u0438\u0447\u0430\u0442\u043e\u044e \u0441\u043b\u0438\u0448\u0448\u043a\u0430\u043c \u0431\u044b\u0441\u0440\u043e \u0438 \u043d\u0435\u0430\u043a\u0443\u0440\u0430\u0442\u043d\u043e!'\n# \u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c\n\ntext_correct = '\u042f \u043f\u0435\u0447\u0430\u0442\u0430\u044e \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u044b\u0441\u0442\u0440\u043e \u0438 \u043d\u0435\u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e'\n# \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0443\n\nwer_metric = wer(text_correct, text)\n\nwer_metric\n\n\u041f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u044b\u043c \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 WER \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 0.15. \u0427\u0435\u043c \u043c\u0435\u043d\u044c\u0448\u0435 WER, \u0442\u0435\u043c \u043b\u0443\u0447\u0448\u0435. WER, \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0439 \u0434\u043b\u044f 2 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0444\u0440\u0430\u0437, \u0432\u044b\u0434\u0430\u0441\u0442 0\n# \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0443 \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\n\nwer_metric = wer(text_correct, text_correct)\n\nwer_metric\n\n\u0414\u0430\u043b\u0435\u0435 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 WER \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442.\n\n\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0433\u0430\u0435\u043c \u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438.\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 + noisereduce\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n\ngdown.download('https://storage.yandexcloud.net/aiueducation/Content/GPT_Professional/L35/\u0414\u0430\u0442\u0430\u0441\u0435\u0442_\u0430\u0443\u0434\u0438\u043e.zip')\n\n!unzip -q \u0414\u0430\u0442\u0430\u0441\u0435\u0442_\u0430\u0443\u0434\u0438\u043e.zip\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\n\nlen(os.listdir('\u0414\u0430\u0442\u0430\u0441\u0435\u0442_\u0430\u0443\u0434\u0438\u043e'))\n# \u041f\u043e\u0441\u043b\u0443\u0448\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\n\naudio_file = \"/content/\u0414\u0430\u0442\u0430\u0441\u0435\u0442_\u0430\u0443\u0434\u0438\u043e/audio_2023-11-20_18-04-29.ogg\"\n\nsample = AudioSegment.from_file(file=audio_file, format='ogg')\n\nsample\n# \u043d\u0430 \u0444\u043e\u043d\u0435 \u043c\u043d\u043e\u0433\u043e \u0448\u0443\u043c\u0430, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0435\u0433\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 noisereduce\n\ndata, rate = sf.read(audio_file)\n\nreduced_noise = nr.reduce_noise(y=data, sr=rate)\n\noutput_file = '/content/reduced_noise.wav'\n\nsf.write(output_file, reduced_noise, rate)\n\n\n\nsample_reduced_noise = AudioSegment.from_file(file=output_file, format ='wav')\n\nsample_reduced_noise\n\n\u0428\u0443\u043c \u044f\u0432\u043d\u043e \u043f\u043e\u0434\u0430\u0432\u0438\u043b\u0441\u044f.\n\n\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u043a\u0430\u043a\u0443\u044e \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0447\u0438.\n\u041c\u043e\u0434\u0435\u043b\u044c vosk, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043d\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b\u044b .ogg, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 .wav. \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 4 \u043c\u0438\u043d\u0443\u0442, \u0438 \u0438\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u043f\u0430\u043f\u043a\u0430 \u0432\u0435\u0441\u0438\u0442 1.6 \u0433\u0431\nnew_folder = '/content/\u0414\u0430\u0442\u0430\u0441\u0435\u0442_\u0430\u0443\u0434\u0438\u043e_wav'\nos.makedirs(new_folder, exist_ok=True)\n\n\n\norg_folder = '/content/\u0414\u0430\u0442\u0430\u0441\u0435\u0442_\u0430\u0443\u0434\u0438\u043e'\n\n\n\nfor file_name in os.listdir(org_folder):\n\n  if file_name.endswith(\".ogg\"):\n\n    file_path = os.path.join(org_folder, file_name)\n\n    audio_file = AudioSegment.from_ogg(file_path)\n\n    new_file_name = os.path.splitext(file_name)[0] + \".wav\"\n\n    new_file_path = os.path.join(new_folder, new_file_name)\n\n    audio_file.export(new_file_path, format=\"wav\")\n# \u041f\u0443\u0442\u044c \u043a \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0430\u0443\u0434\u0438\u043e \u0432 wav \u0444\u043e\u0440\u043c\u0430\u0442\u0435\n\ndataset_path = new_folder", "metadata": {"subid": 0, "total": 2, "source": "https://colab.research.google.com/drive/1S-z1Sdi7b3qc4DaV66u5a3prn1jwNxz1?usp=sharing"}}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n# \u0424\u0443\u043d\u043a\u0446\u0438\u0438\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u0431\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e vosk\n\ndef vosk_transcribation(filepath, model, rate):\n\n    '''\n\n    file_path - \u043f\u0443\u0442\u044c \u043a \u0430\u0443\u0434\u0438\u043e \u0444\u0430\u0439\u043b\u0443 \u0441 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c .wav\n\n    model - \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c vosk\n\n    rate - \u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u043e\u0446\u0438\u0444\u0440\u043e\u0432\u043a\u0438\n\n    '''\n\n    # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0430\u0443\u0434\u0438\u043e \u0444\u0430\u0439\u043b\n\n    with open(filepath, \"rb\") as f:\n\n        data = f.read()\n\n\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 vosk.KaldiRecognizer \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0435\u043c\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u043e\u0446\u0438\u0444\u0440\u043e\u0432\u043a\u0438\n\n    recognizer = vosk.KaldiRecognizer(model, rate)\n\n\n\n    # \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0435\u043c \u0440\u0435\u0447\u044c, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u044f \u0431\u0443\u0444\u0435\u0440 \u0430\u0443\u0434\u0438\u043e\u0444\u0430\u0439\u043b\u0430 \u0432 \u043c\u0435\u0442\u043e\u0434 AcceptWaveform \u043e\u0431\u044a\u0435\u043a\u0442\u0430 KaldiRecognizer\n\n    recognizer.AcceptWaveform(data)\n\n\n\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n    recognized_data = json.loads(recognizer.Result())\n\n\n\n    return recognized_data[\"text\"]\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a \u0432 \u0441\u043b\u043e\u0432\u0430\u0445\n\ndef correct_spelling(text):\n\n\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 SpellChecker\n\n    spell = SpellChecker(language='ru')\n\n\n\n    # \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0441\u043b\u043e\u0432\u0430 \u0438 \u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f\n\n    words = re.findall(r'\\w+|[^\\w\\s]', text)\n\n\n\n    # \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0438 \u0437\u043d\u0430\u043a\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043e\u0448\u0438\u0431\u043e\u0447\u043d\u044b\u0445, \u0431\u0443\u0434\u0435\u043c \u0438\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\n\n    misspelled = spell.unknown(words)\n\n\n\n    result = []\n\n\n\n    # \u0421\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u043b\u0438\u0431\u043e \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438, \u0435\u0441\u043b\u0438 \u0434\u043b\u044f \u043d\u0438\u0445 \u043d\u0435 \u043d\u0430\u0448\u043b\u043e\u0441\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\n\n    for word in words:\n\n        if word in misspelled:\n\n\n\n            # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0430\u043c\u043e\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\n\n            corrected = spell.correction(word)\n\n\n\n\n\n            if corrected:\n\n                # \u0415\u0441\u043b\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0439\u0434\u0435\u043d, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n\n                result.append(corrected)\n\n            else:\n\n                # \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 - \u0442\u043e \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0441\u043b\u043e\u0432\u0430\n\n                result.append(word)\n\n        else:\n\n            result.append(word)\n\n\n\n    # \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u0441\u0442\u0440\u043e\u043a\u0443\n\n    result = ' '.join(result)\n\n\n\n    # \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043f\u0440\u0435\u043f\u0438\u043d\u0430\u043d\u0438\u044f\n\n    return re.sub(r'\\s+([^\\w\\s])', r'\\1', result)\n# \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u0431\u0430\u0446\u0438\u0438 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u043e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0448\u0443\u043c\u0430 \u0444\u0430\u0439\u043b\u043e\u0432,\n\n# \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0438 \u0431\u0435\u0437 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0448\u0438\u0431\u043e\u043a \u0432 \u0441\u043b\u043e\u0432\u0430\u0445\n\n\n\n# \u041f\u0430\u043f\u043a\u0430 \u0434\u043b\u044f \u043e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0448\u0443\u043c\u0430 \u0430\u0443\u0434\u0438\u043e\u0444\u0430\u0439\u043b\u043e\u0432\n\nreduced_noise_dir = '\u041e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0435'\n\nos.makedirs(reduced_noise_dir, exist_ok=True)\n\n\n\n\n\ndef run_whisper(model_whisper, n):\n\n    '''\n\n    model_whisper - \u043c\u043e\u0434\u0435\u043b\u044c whisper\n\n    n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u0443\u0434\u0438\u043e \u0444\u0430\u0439\u043b\u043e\u0432\n\n    '''\n\n    # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n    for i, file_name in enumerate(sorted(os.listdir(dataset_path))):\n\n\n\n          # \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0444\u0430\u0439\u043b\u043e\u0432\n\n          if i == n:\n\n              break\n\n\n\n          # \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u0430\u0443\u0434\u0438\u043e \u0444\u0430\u0439\u043b\u0443\n\n          orig_audio_file = os.path.join(dataset_path, file_name)\n\n          print(file_name)\n\n\n\n          # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0448\u0443\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 reduce_noise\n\n          data, rate = sf.read(orig_audio_file)\n\n          reduced_noise = nr.reduce_noise(y=data, sr=rate)\n\n          reduced_noise_file = os.path.join(reduced_noise_dir, file_name)\n\n\n\n          # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u043f\u0430\u043f\u043a\u0443\n\n          sf.write(reduced_noise_file, reduced_noise, rate)\n\n\n\n          # WHISPER. \u0418\u0421\u0425\u041e\u0414\u041d\u041e\u0415 \u0410\u0423\u0414\u0418\u041e\n\n          result = model_whisper.transcribe(orig_audio_file)\n\n          result_text = result[\"text\"].strip()\n\n          print('Wisper. \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b:'.ljust(30), result_text)\n\n\n\n          # \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u043f\u0440\u0430\u0432\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\n\n          corrected_text = correct_spelling(result_text)\n\n          print('Wisper. \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b (\u043a\u043e\u0440\u0440): '.ljust(30), corrected_text)\n\n\n\n\n\n          # WHISPER. \u041e\u0427\u0418\u0429\u0415\u041d\u041d\u041e\u0415 \u0410\u0423\u0414\u0418\u041e\n\n          result = model_whisper.transcribe(reduced_noise_file)\n\n          result_text = result[\"text\"].strip()\n\n          print('Wisper. \u041e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0439:'.ljust(30), result_text)\n\n\n\n          # \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u043f\u0440\u0430\u0432\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\n\n          corrected_text = correct_spelling(result_text)\n\n          print('Wisper. \u041e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0439 (\u043a\u043e\u0440\u0440):  '.ljust(30), corrected_text)\n\n\n\n\n\n          print()\n\n\n\ndef run_vosk(model_vosk, n):\n\n    '''\n\n    model_vosk - \u043c\u043e\u0434\u0435\u043b\u044c vosk\n\n    n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u0443\u0434\u0438\u043e \u0444\u0430\u0439\u043b\u043e\u0432\n\n    '''\n\n    # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\n    for i, file_name in enumerate(sorted(os.listdir(dataset_path))):\n\n\n\n          # \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0444\u0430\u0439\u043b\u043e\u0432\n\n          if i == n:\n\n              break\n\n\n\n          # \u043e\u0431\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u0430\u0443\u0434\u0438\u043e \u0444\u0430\u0439\u043b\u0443\n\n          orig_audio_file = os.path.join(dataset_path, file_name)\n\n          print(file_name)\n\n\n\n          # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0448\u0443\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 reduce_noise\n\n          data, rate = sf.read(orig_audio_file)\n\n          reduced_noise = nr.reduce_noise(y=data, sr=rate)\n\n          reduced_noise_file = os.path.join(reduced_noise_dir, file_name)\n\n\n\n          # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u043f\u0430\u043f\u043a\u0443\n\n          sf.write(reduced_noise_file, reduced_noise, rate)\n\n\n\n          # VOSK. \u0418\u0421\u0425\u041e\u0414\u041d\u041e\u0415 \u0410\u0423\u0414\u0418\u041e\n\n          result_text = vosk_transcribation(orig_audio_file, model_vosk, rate)\n\n          print('Vosk. \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b:'.ljust(30), result_text)\n\n\n\n          # \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u043f\u0440\u0430\u0432\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\n\n          corrected_text = correct_spelling(result_text)\n\n          print('Vosk. \u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b (\u043a\u043e\u0440\u0440): '.ljust(30), corrected_text)\n\n\n\n\n\n          # VOSK. \u041e\u0427\u0418\u0429\u0415\u041d\u041d\u041e\u0415 \u0410\u0423\u0414\u0418\u041e\n\n          result_text = vosk_transcribation(reduced_noise_file, model_vosk, rate)\n\n          print('Vosk. \u041e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0439:'.ljust(30), result_text)\n\n\n\n          # \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043a\u043e\u0440\u0440\u0435\u043a\u0446\u0438\u044f \u043f\u0440\u0430\u0432\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\n\n          corrected_text = correct_spelling(result_text)\n\n          print('Vosk. \u041e\u0447\u0438\u0449\u0435\u043d\u043d\u044b\u0439 (\u043a\u043e\u0440\u0440): '.ljust(30), corrected_text)\n\n\n\n          print()\n\n# \u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b\n## whisper tiny (72.1 \u041c\u0431)\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c wisper tiny (72.1 \u041c\u0431)\n\nmodel_whisper = whisper.load_model(\"tiny\")\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 = 5\n\nrun_whisper(model_whisper, 5)\n\n## vosk-model-small-ru-0.22 (46 \u041c\u0431)\n# \u0421\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c vosk\n\ngdown.download('https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip')\n\n!unzip -q vosk-model-small-ru-0.22.zip\n\n\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c vosk \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435(46 \u041c\u0431)\n\nmodel_vosk = vosk.Model(\"vosk-model-small-ru-0.22\")\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 = 5\n\nrun_vosk(model_vosk, 5)\n\n## wisper base (139 \u041c\u0431)\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c wisper base (139 \u041c\u0431)\n\nmodel_whisper = whisper.load_model(\"base\")\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 = 5\n\nrun_whisper(model_whisper, 5)\n\n## whisper small (461 \u041c\u0431)\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c wisper small (461 \u041c\u0431)\n\nmodel_whisper = whisper.load_model(\"small\")\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 = 5\n\nrun_whisper(model_whisper, 5)\n\n## whisper medium (1.42 \u0413\u0431)\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c wisper medium (1.42 \u0413\u0431)\n\nmodel_whisper = whisper.load_model(\"medium\")\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 = 5\n\nrun_whisper(model_whisper, 5)\n\n## vosk-model-ru-0.22 (1.56 \u0413\u0431)\n# \u0421\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c vosk\n\ngdown.download('https://alphacephei.com/vosk/models/vosk-model-ru-0.22.zip')\n\n!unzip -q vosk-model-ru-0.22.zip\n\n\u0427\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u041e\u0417\u0423, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u0443!!!\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c vosk \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435(1.56 \u0413\u0431)\n\nmodel_vosk = vosk.Model(\"vosk-model-ru-0.22\")\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 = 5\n\nrun_vosk(model_vosk, 5)", "metadata": {"subid": 1, "total": 2, "source": "https://colab.research.google.com/drive/1S-z1Sdi7b3qc4DaV66u5a3prn1jwNxz1?usp=sharing"}}}]