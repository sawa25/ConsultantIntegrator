[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n\n# \u041d\u0435\u0439\u0440\u043e-\u0430\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441\u0430\u0439\u0442\u0430\n\u0414\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0435\u0439\u0440\u043e-\u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u043d\u0442\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0411\u0417 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u0443\u0442\u0435\u043c \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0441\u0430\u0439\u0442\u0430.   \u0422\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0430\u044f \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0431\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439 \u043d\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437-\u0437\u0430 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0438 \u0441\u0431\u043e\u0440\u043a\u0438.\n\n\n\n\u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0438\u043b\u043e\u0442\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432.\n## \u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 - \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 SitemapLoader\nhttps://python.langchain.com/docs/integrations/document_loaders/sitemap\n\n\n\n\u041e\u0431\u044b\u0447\u043d\u043e sitemap.xml \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 domain.com/sitemap.xml\n\n\n\n**\u041a\u0430\u043a \u043d\u0430\u0439\u0442\u0438 XML-Sitemap**\n\n\n\n\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u0440\u0442\u0443 \u0441\u0430\u0439\u0442\u0430:\n\n\n\n- \u0412 \u0444\u0430\u0439\u043b\u0435 robots.txt. \u041f\u0440\u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0432 \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435: https://site.com/robots.txt. \u0412 \u0441\u0430\u043c\u043e\u043c \u0444\u0430\u0439\u043b\u0435, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u0430 XML-Sitemap \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435: sitemap: https://site.com/sitemap.xml\n\n- \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0441\u043c\u043e\u0433\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u0441\u0441\u044b\u043b\u043a\u0443 \u043d\u0430 \u0444\u0430\u0439\u043b \u0432 robots.txt, \u043f\u0440\u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0432 \u0430\u0434\u0440\u0435\u0441\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441: https://site.com/sitemap.xml\n\n\ud83d\udca1 \u0415\u0441\u043b\u0438 \u0444\u043e\u0440\u043c\u0430\u0442 url \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 Robots.txt \u0441\u0442\u0440\u043e\u0433\u043e \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u2014 /robots.txt, \u0442\u043e url \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u0430 Sitemap.xml \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u044b\u043c.\n\n\n\n/sitemap.xml \u2014 \u043f\u0440\u043e\u0441\u0442\u043e \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 XML-\u043a\u0430\u0440\u0442\u044b, \u043d\u043e \u043e\u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u043c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: /sitemap-categories.xml, /sitemap-en.xml \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435.\n\n- \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c https://www.seoptimer.com/sitemap-checker/\n\n\n\n\n\nSitemapLoader \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u0430\u0440\u0442\u0443 \u0441\u0430\u0439\u0442\u0430 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 URL-\u0430\u0434\u0440\u0435\u0441\u0443, \u0430 \u0437\u0430\u0442\u0435\u043c \u043e\u0447\u0438\u0449\u0430\u0435\u0442 \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u043a\u0430\u0440\u0442\u0435 \u0441\u0430\u0439\u0442\u0430, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044f \u043a\u0430\u0436\u0434\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043a\u0430\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442. SitemapLoader \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u0430\u0440\u0442\u0430\u043c\u0438 \u0441\u0430\u0439\u0442\u0430 (sitemaps). \u041a\u0430\u0440\u0442\u044b \u0441\u0430\u0439\u0442\u0430 \u2013 \u044d\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 XML-\u0444\u0430\u0439\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0435\u0431-\u043c\u0430\u0441\u0442\u0435\u0440\u0430 \u0441\u043e\u0437\u0434\u0430\u044e\u0442 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u043e\u0432\u044b\u0445 \u0440\u043e\u0431\u043e\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043b\u0443\u0447\u0448\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u0430\u0439\u0442\u0430.\n\n\n\n**\u041c\u0435\u0442\u043e\u0434\u044b \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430:**\n\n\n\n- aload()\n\n\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u044b \u043f\u043e URL \u0438\u0437 web_path \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0438\u0445 \u0432 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n\n- fetch_all(urls)\n\n\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 URL \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e, \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u0438.\n\n- lazy_load()\n\n\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \"\u043b\u0435\u043d\u0438\u0432\u0443\u044e\" \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0443 \u0442\u0435\u043a\u0441\u0442\u043e\u0432 \u043f\u043e URL, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043e\u0442\u043b\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u043a\u043e\u0433\u0434\u0430 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u043d\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u044f \u0432\u0441\u0451 \u0441\u0440\u0430\u0437\u0443.\n\n- load()\n\n\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043a\u0430\u0440\u0442\u0443 \u0441\u0430\u0439\u0442\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0451 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n\n- load_and_split([text_splitter])\n\n\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0438\u0445 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c text_splitter.\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: text_splitter \u2013 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430.\n\n\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442: \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n\n- parse_sitemap(soup)\n\n\u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 XML \u043a\u0430\u0440\u0442\u044b \u0441\u0430\u0439\u0442\u0430 \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439.\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: soup \u2013 \u043e\u0431\u044a\u0435\u043a\u0442 BeautifulSoup.\n\n\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442: \u0421\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439.\n\n- scrape([parser])\n\n\u0418\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c BeautifulSoup.\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440: parser \u2013 \u0432\u044b\u0431\u043e\u0440 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.\n\n- scrape_all(urls[, parser])\n\n\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u0441\u0435 URL \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u044b BeautifulSoup \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445.\n\n\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: urls \u2013 \u0441\u043f\u0438\u0441\u043e\u043a URL; parser \u2013 \u0432\u044b\u0431\u043e\u0440 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.\n\n\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442: \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 BeautifulSoup.\n!pip install nest_asyncio==1.6.0 xmltodict==0.13.0 openai==1.10.0 langchain==0.1.4 tiktoken==0.5.2 faiss-cpu==1.7.4 langchain-openai==0.0.5\n# fixes a bug with asyncio and jupyter\n\nimport nest_asyncio\n\nnest_asyncio.apply()\n\nimport xmltodict\n\nfrom langchain.document_loaders.sitemap import SitemapLoader\n\nimport requests\n\nfrom langchain.vectorstores import FAISS\n\nfrom langchain.embeddings import OpenAIEmbeddings\n\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\nimport tiktoken\n\nimport matplotlib.pyplot as plt\n\nimport getpass\n\nimport os\n\nimport openai\n\nfrom openai import OpenAI\n\nfrom langchain.vectorstores import FAISS\n\nimport re\n\nimport getpass\n\nfrom google.colab import userdata\n\nfrom langchain_openai import ChatOpenAI\n\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter, MarkdownHeaderTextSplitter, CharacterTextSplitter\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u044e\u0447\u0430 API \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0435\u0433\u043e \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\nopenai_key = userdata.get(\"OPENAI_API_KEY\")\n\nos.environ[\"OPENAI_API_KEY\"] = openai_key\n\nopenai.api_key = openai_key\nurl = \"https://avangard-ocenka.ru/\"\n\nurl_site_map = f\"{url}/sitemap.xml\"\n\n\n\nsitemap_loader = SitemapLoader(web_path=url_site_map,\n\n    # filter_urls=filter_urls\n\n    )\n\n#docs = sitemap_loader.load()\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 RecursiveCharacterTextSplitter, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u0440\u0430\u0437\u0443, \u043d\u0430 \u043a\u0430\u043a\u0438\u0435 \u0447\u0430\u043d\u043a\u0438 \u043c\u044b \u0436\u0435\u043b\u0430\u0435\u043c \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\u0448\u0438 \u0442\u0435\u043a\u0441\u0442\u044b)\n\ntext_splitter_instance = RecursiveCharacterTextSplitter(chunk_size = 750, chunk_overlap  = 20,)\n\ndocs = sitemap_loader.load_and_split(text_splitter=text_splitter_instance)\n# \u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u043d\u043a\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\n\nlen(docs)\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u043f\u0435\u0440\u0432\u044b\u0445 3 \u0447\u0430\u043d\u043a\u043e\u0432\n\ndocs[:3]\ndef num_tokens_from_string(string: str, encoding_name: str) -> int:\n\n      \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\"\"\"\n\n      encoding = tiktoken.get_encoding(encoding_name)\n\n      num_tokens = len(encoding.encode(string))\n\n      return num_tokens\n# \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n\nfragment_token_counts = [num_tokens_from_string(fragment.page_content, \"cl100k_base\") for fragment in docs]\n\nplt.hist(fragment_token_counts, bins=50, alpha=0.5, label='Fragments')\n\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u043d \u0447\u0430\u043d\u043a\u043e\u0432 \u0432 \u0442\u043e\u043a\u0435\u043d\u0430\u0445')\n\nplt.xlabel('Token Count')\n\nplt.ylabel('Frequency')\n\nplt.show()\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\n\nembeddings = OpenAIEmbeddings()\n\n\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u043a\u0441\u0442\u0430\n\ndb = FAISS.from_documents(docs, embeddings)\nsystem=\"\u041e\u0447\u0435\u043d\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0438 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043e\u0442\u0432\u0435\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043e\u043f\u0438\u0440\u0430\u044f\u0441\u044c \u0442\u043e\u0447\u043d\u043e \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041d\u0435 \u043f\u0440\u0438\u0434\u0443\u043c\u044b\u0432\u0430\u0439 \u043d\u0438\u0447\u0435\u0433\u043e \u043e\u0442 \u0441\u0435\u0431\u044f. \u041d\u0435 \u0441\u0441\u044b\u043b\u0430\u0439\u0441\u044f \u043d\u0430 \u0441\u0430\u043c\u0438 \u043e\u0442\u0440\u044b\u0432\u043a\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430, \u043a\u043b\u0438\u0435\u043d\u0442 \u043e \u043d\u0438\u0445 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u043d\u0430\u0442\u044c.\"\ndef answer_index(system, topic, search_index, temp=0, verbose=0) -> str:\n\n    \"\"\"\n\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u0435\u043c\u044b.\n\n    \"\"\"\n\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0430\u043d\u043a\u0438:\n\n    docs = search_index.similarity_search(topic, k=6)\n\n    message_content = re.sub(r'\\n{2}', ' ', '\\n '.join([f'\\n\u041e\u0442\u0440\u044b\u0432\u043e\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u2116{i+1}\\n=====================' + doc.page_content + '\\n' for i, doc in enumerate(docs)]))\n\n\n\n    # \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 verbose=1, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0447\u0430\u043d\u043a\u0438\n\n    if verbose:\n\n        print('message_content :\\n', message_content)\n\n\n\n    client = OpenAI()\n\n    messages = [\n\n        {\"role\": \"system\", \"content\": system},\n\n        {\"role\": \"user\", \"content\": f\"\u041e\u0442\u0432\u0435\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043d\u043e \u043d\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u0431\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e: {message_content}\\n\\n\u0412\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \\n{topic}\"}\n\n    ]\n\n\n\n    completion = client.chat.completions.create(\n\n        model=\"gpt-3.5-turbo-1106\",\n\n        messages=messages,\n\n        temperature=temp\n\n    )\n\n\n\n    return completion.choices[0].message.content\ntopic=\"\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u0438\u0442 \u043e\u0446\u0435\u043d\u043a\u0430 \u0443\u0449\u0435\u0440\u0431\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435 \u043f\u0440\u0438 \u0437\u0430\u0442\u043e\u043f\u043b\u0435\u043d\u0438\u0438 \u0441\u043e\u0441\u0435\u0434\u044f\u043c\u0438?\"\n\nans=answer_index(system, topic, db, temp=0, verbose=0)\n\nans\ntopic=\"\u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0437\u0430 1 \u0434\u0435\u043d\u044c?\"\n\nans=answer_index(system, topic, db, temp=0, verbose=0)\n\nans\ntopic=\"\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u0438\u0442 \u043e\u0446\u0435\u043d\u043a\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0438?\"\n\nans=answer_index(system, topic, db, temp=0, verbose=0)\n\nans\n\n## \u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 - \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441\u0430\u0439\u0442\u0430, \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430, \u043d\u0435\u0439\u0440\u043e-\u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u043d\u0442.\n!pip install html2text==2024.2.26\nfrom langchain.document_loaders import AsyncHtmlLoader\n\nfrom langchain.document_transformers import Html2TextTransformer\n\nfrom langchain.chat_models import ChatOpenAI\n\nfrom langchain.chains import create_extraction_chain\n\nAsyncHtmlLoader  \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 HTML \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432\n# \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430\n\nurls = [\"https://avangard-ocenka.ru/oczenka-nedvizhimosti/oczenka-dlya-ipoteki/\",\n\n        \"https://avangard-ocenka.ru/ekspertiza/sudebnaya-stroitelno-tehnicheskaya/\", \"https://avangard-ocenka.ru/o-kompanii/\"]\n\nloader = AsyncHtmlLoader(urls)\n\ndocs = loader.load()\n# \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n\nlen(docs)\ndocs[0]\n# \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0438\u0445 \u0432 \u0442\u0435\u043a\u0441\u0442\n\nhtml2text = Html2TextTransformer()\n\ndocs_transformed = html2text.transform_documents(docs)\n# \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0442\u0435\u043a\u0441\u0442 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0438\n\ndocs_transformed[0].page_content", "metadata": {"subid": 0, "total": 3, "source": "https://colab.research.google.com/drive/1vjgjizRzwgwbxEpf6-ZTFVpve6RgF7B3?usp=sharing"}}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n\u0422\u0435\u043a\u0441\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043d\u043e\u0433\u043e \u043c\u0443\u0441\u043e\u0440\u0430. \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439:\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0442\u0435\u043a\u0441\u0442\u0430\n\n\n\ndef clean_text(text):\n\n    # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u043f\u043e\u0434\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432\n\n    text = re.sub(r\"\\* .+\\n\", \"\", text)\n\n\n\n    # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432 \u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0430\u0434\u0440\u0435\u0441\u043e\u0432\n\n    #text = re.sub(r\"\\+\\d+ \\(\\d+\\) \\d+-\\d+-\\d+\", \"\", text)\n\n    #text = re.sub(r\"\\w+@\\w+\\.\\w+\", \"\", text)\n\n\n\n    # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043b\u0438\u043d\u0438\u0439 \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n\n    text = re.sub(r\"__+\", \"\", text)\n\n\n\n    # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 JavaScript\n\n    text = re.sub(r\"\u041d\u0430\u0436\u0438\u043c\u0430\u044f \u043a\u043d\u043e\u043f\u043a\u0443 .+\\n\", \"\", text)\n\n    text = re.sub(r\"\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435 JavaScript .+\\n\", \"\", text)\n\n\n\n    # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0442\u0438\u043f\u0430 \"\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0434\u043b\u044f [\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0411\u0430\u043d\u043a\u0430] \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435\"\n\n    text = re.sub(r\"\u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0434\u043b\u044f .+ \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \\n\", \"\", text)\n\n\n\n    # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \"\u0417\u0430\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u0432\u043e\u043d\u043e\u043a\"\n\n    text = re.sub(r\".*\u0417\u0430\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u0432\u043e\u043d\u043e\u043a.*\\n\", \"\", text)\n\n\n\n    # \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u043e\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\n\n    text = re.sub(r\"\\n\\s*\\n\", \"\\n\", text)\n\n\n\n    return text\n\n# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0443 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n\nfor doc in docs_transformed:\n\n    doc.page_content = clean_text(doc.page_content)\nfor doc in docs_transformed:\n\n    print(doc.page_content)\nheaders_to_split_on = [\n\n    (\"#\", \"Header 1\"),\n\n    (\"##\", \"Header 2\"),\n\n    (\"###\", \"Header 3\"),\n\n    (\"####\", \"Header 4\")\n\n\n\n]\n\nmarkdown_splitter = MarkdownHeaderTextSplitter(headers_to_split_on=headers_to_split_on)\n\nchunks = []\n\nfor doc in docs_transformed:\n\n  fragments = markdown_splitter.split_text(doc.page_content)\n\n  chunks.extend(fragments)\n\nfragment_token_counts = [num_tokens_from_string(fragment.page_content, \"cl100k_base\") for fragment in chunks]\n\nplt.hist(fragment_token_counts, bins=100, alpha=0.5, label='Fragments')  # \u0423\u0432\u0435\u043b\u0438\u0447\u044c\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0438\u043d\u043e\u0432 \u0434\u043e 100\n\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u043d \u0447\u0430\u043d\u043a\u043e\u0432 \u0432 \u0442\u043e\u043a\u0435\u043d\u0430\u0445')\n\nplt.xlabel('Token Count')\n\nplt.ylabel('Frequency')\n\nplt.show()\nchunks\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\n\nembeddings = OpenAIEmbeddings()\n\n\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u043a\u0441\u0442\u0430\n\ndb_2 = FAISS.from_documents(chunks, embeddings)\nsystem=\"\u041e\u0447\u0435\u043d\u044c \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e \u0438 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043e\u0442\u0432\u0435\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043e\u043f\u0438\u0440\u0430\u044f\u0441\u044c \u0442\u043e\u0447\u043d\u043e \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041d\u0435 \u043f\u0440\u0438\u0434\u0443\u043c\u044b\u0432\u0430\u0439 \u043d\u0438\u0447\u0435\u0433\u043e \u043e\u0442 \u0441\u0435\u0431\u044f. \u041d\u0435 \u0441\u0441\u044b\u043b\u0430\u0439\u0441\u044f \u043d\u0430 \u0441\u0430\u043c\u0438 \u043e\u0442\u0440\u044b\u0432\u043a\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430, \u043a\u043b\u0438\u0435\u043d\u0442 \u043e \u043d\u0438\u0445 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u043d\u0430\u0442\u044c.\"\ndef answer_index(system, topic, search_index, temp=0, verbose=0) -> str:\n\n    \"\"\"\n\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0442\u0435\u043c\u044b.\n\n    \"\"\"\n\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0447\u0430\u043d\u043a\u0438:\n\n    docs = search_index.similarity_search(topic, k=6)\n\n    message_content = re.sub(r'\\n{2}', ' ', '\\n '.join([f'\\n\u041e\u0442\u0440\u044b\u0432\u043e\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u2116{i+1}\\n=====================' + doc.page_content + '\\n' for i, doc in enumerate(docs)]))\n\n\n\n    # \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 verbose=1, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0447\u0430\u043d\u043a\u0438\n\n    if verbose:\n\n        print('message_content :\\n', message_content)\n\n\n\n    client = OpenAI()\n\n    messages = [\n\n        {\"role\": \"system\", \"content\": system},\n\n        {\"role\": \"user\", \"content\": f\"\u041e\u0442\u0432\u0435\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043d\u043e \u043d\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u0439 \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u0431\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e: {message_content}\\n\\n\u0412\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \\n{topic}\"}\n\n    ]\n\n\n\n    completion = client.chat.completions.create(\n\n        model=\"gpt-3.5-turbo-1106\",\n\n        messages=messages,\n\n        temperature=temp\n\n    )\n\n\n\n    return completion.choices[0].message.content\ntopic=\"\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u0438\u0442 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0430 \u043f\u0435\u0447\u0430\u0442\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u043e\u0442\u0447\u0435\u0442\u0430?\"\n\nans=answer_index(system, topic, db_2, temp=0, verbose=0)\n\nans\ntopic=\"\u041a\u0430\u043a\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u044f \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0441\u0443\u0434\u0435\u0431\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u043e-\u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u044d\u043a\u0441\u043f\u0435\u0440\u0442\u0438\u0437\u044b?\"\n\nans=answer_index(system, topic, db_2, temp=0, verbose=0)\n\nans\n\n# \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u0431\u0430\u0437\u0430\u043c\u0438 \u0437\u043d\u0430\u043d\u0438\u0439\n## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 pdf:\n\u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 pdf, \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u043e\u0442 \u0442\u0430\u043a:\n\n\n\n\u0421\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 pdf:\n\n\n\nhttps://www.toyotakz.com/content/dam/toyota/nmsc/kazakhstan/cross-model/new-cars/ru/pricelists/july-2023/Corolla_Rus_June_2023_new.pdf\n\n\n\nhttps://www.toyotakz.com/content/dam/toyota/nmsc/kazakhstan/cross-model/new-cars/ru/brochures/broshura_corolla.pdf\n\n\n\nhttps://www.toyotakz.com/content/dam/toyota/nmsc/kazakhstan/cross-model/new-cars/ru/pricelists/may-2023/LCPrado.pdf\n\n\n\n\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043c\u044b \u0432\u043e\u0437\u044c\u043c\u0435\u043c 2 pdf \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u0438\u0445 \u0432 1 \u0411\u0417 (\u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u041a\u043e\u0440\u043e\u043b\u043b\u0430)\n!pip install unstructured_inference==0.7.24 pikepdf==8.13.0 pypdf==4.0.2\n!pip install unstructured==0.12.5 pdf2image==1.17.0 pdfminer.six==20221105 faiss-cpu==1.7.4 pillow_heif==0.15.0\nfrom langchain.chains.router import MultiRetrievalQAChain\n\nfrom langchain.llms import OpenAI\n\nfrom langchain_openai import ChatOpenAI\n\nfrom langchain.embeddings import OpenAIEmbeddings\n\nfrom langchain.document_loaders import TextLoader\n\nfrom langchain.vectorstores import FAISS\n\nfrom langchain.document_loaders import UnstructuredPDFLoader\n\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\nimport re\n\nimport requests\n\nimport os\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 URL PDF-\u0444\u0430\u0439\u043b\u0430 \u0438 \u043f\u0443\u0442\u044c, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0444\u0430\u0439\u043b \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u0432 \u0444\u0430\u0439\u043b\u043e\u0432\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 Colab.\n\n# \u041e\u043d\u0430 \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0435\u0433\u043e, \u0435\u0441\u043b\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441 \u0443\u0441\u043f\u0435\u0448\u0435\u043d\n\ndef download_pdf_from_url(url, save_path):\n\n    response = requests.get(url)\n\n\n\n    if response.status_code == 200:\n\n        with open(save_path, 'wb') as f:\n\n            f.write(response.content)\n\n        print(f\"PDF downloaded and saved as {save_path}\")\n\n    else:\n\n        print(f\"Failed to download PDF. HTTP Status Code: {response.status_code}\")\n\n\n\n# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432\u044b\u0448\u0435\n\nurl = \"https://www.toyotakz.com/content/dam/toyota/nmsc/kazakhstan/cross-model/new-cars/ru/pricelists/july-2023/Corolla_Rus_June_2023_new.pdf\"\n\nsave_path = \"/content/Corolla_Rus_June_2023_new.pdf\"\n\n\n\ndownload_pdf_from_url(url, save_path)\nurl = \"https://www.toyotakz.com/content/dam/toyota/nmsc/kazakhstan/cross-model/new-cars/ru/brochures/broshura_corolla.pdf\"\n\nsave_path = \"/content/broshura_corolla.pdf\"\n\n\n\ndownload_pdf_from_url(url, save_path)\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 PDF-\u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439 FAISS\n\ndef create_faiss_vectorstore(pdf_names):\n\n    pdf_folder_path = \"/content/\"\n\n\n\n    # \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432: \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c\u0438 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\u043c .pdf\n\n    all_files = os.listdir(pdf_folder_path)\n\n    pdf_files = [fn for fn in all_files if fn in pdf_names and fn.endswith('.pdf')]\n\n\n\n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 UnstructuredPDFLoader \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e PDF-\u0444\u0430\u0439\u043b\u0430\n\n    loaders = [UnstructuredPDFLoader(os.path.join(pdf_folder_path, fn)) for fn in pdf_files]\n\n\n\n    all_documents = []\n\n    text_splitter = RecursiveCharacterTextSplitter(chunk_size=800, chunk_overlap=100, length_function=len)\n\n\n\n    for loader in loaders:\n\n        # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430\n\n        raw_documents = loader.load()\n\n        documents = text_splitter.split_documents(raw_documents)\n\n        all_documents.extend(documents)\n\n\n\n    # \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 FAISS vectorstore\n\n    embeddings = OpenAIEmbeddings()\n\n    vectorstore = FAISS.from_documents(all_documents, OpenAIEmbeddings()).as_retriever()\n\n\n\n    return all_documents, vectorstore\n\n\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439 \u043f\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044e \u0422\u043e\u0439\u043e\u0442\u0430 \u041a\u043e\u0440\u043e\u043b\u043b\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0439 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 pdf:\npdf_names = ['Corolla_Rus_June_2023_new.pdf', 'broshura_corolla.pdf']\n\ntext_DB, db_corolla = create_faiss_vectorstore(pdf_names)\n# \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u043a\u0430\u043a\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0430\u0448\u0430 \u0411\u0417\n\ntext_DB\n\n**\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0431\u0430\u0437 \u0437\u043d\u0430\u043d\u0438\u0439 - \"\u0440\u0435\u0442\u0440\u0438\u0432\u0435\u0440\u043e\u0432\" (\u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0445 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449)**\n\n\n\n\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0446\u0435\u043f\u043e\u0447\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442, \u043a\u0430\u043a\u0443\u044e \u043f\u043e\u0438\u0441\u043a\u043e\u0432\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c. \u0412 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u043c\u044b \u043f\u043e\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c MultiRetrievalQAChain \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0446\u0435\u043f\u043e\u0447\u043a\u0438 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432-\u043e\u0442\u0432\u0435\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 \u0446\u0435\u043f\u043e\u0447\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 QA (\u0432\u043e\u043f\u0440\u043e\u0441-\u043e\u0442\u0432\u0435\u0442), \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u0430, \u0430 \u0437\u0430\u0442\u0435\u043c \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0435\u0435.\n\n\n\n\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439 \u0435\u0449\u0435 \u0438 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 Land Cruiser Prado \u0438\u0437 pdf:\n# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c pdf \u0432 \u043f\u0430\u043c\u044f\u0442\u044c \u043a\u043e\u043b\u0430\u0431\u0430\n\nurl = \"https://www.toyotakz.com/content/dam/toyota/nmsc/kazakhstan/cross-model/new-cars/ru/pricelists/may-2023/LCPrado.pdf\"\n\nsave_path = \"/content/LandCruiser.pdf\"\n\n\n\ndownload_pdf_from_url(url, save_path)\n# \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439 faiss \u043f\u043e LandCruiser\n\npdf_names = ['LandCruiser.pdf']\n\ntext_db_Landcruiser, db_LandCruiser = create_faiss_vectorstore(pdf_names)\ntext_db_Landcruiser", "metadata": {"subid": 1, "total": 3, "source": "https://colab.research.google.com/drive/1vjgjizRzwgwbxEpf6-ZTFVpve6RgF7B3?usp=sharing"}}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0443 \u043d\u0430\u0441 \u0438\u043c\u0435\u044e\u0442\u0441\u044f 2 \u0440\u0430\u0437\u043d\u044b\u0435 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439 faiss: \u043e\u0434\u043d\u0430 \u043f\u043e Corolla, \u0432\u0442\u043e\u0440\u0430\u044f \u043f\u043e LandCruiser\n# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0445 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449 (\u0431\u0430\u0437 \u0437\u043d\u0430\u043d\u0438\u0439)\n\nretriever_infos = [\n\n    {\n\n        \"name\": \"TOYOTA COROLLA\",\n\n        \"description\": \"Suitable for answering questions about TOYOTA COROLLA cars\",  # \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c, \u0434\u043b\u044f \u043a\u0430\u043a\u0438\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u0443\u044e \u0411\u0417\n\n        \"retriever\": db_corolla\n\n    },\n\n    {\n\n        \"name\": \"Land Cruiser Prado\",\n\n        \"description\": \"Suitable for answering questions about TOYOTA Land Cruiser Prado cars\", # \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c, \u0434\u043b\u044f \u043a\u0430\u043a\u0438\u0445 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u0443\u044e \u0411\u0417\n\n        \"retriever\": db_LandCruiser\n\n    }\n\n]\n# \u0418\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0442\u043e\u0440\u0430\n\nchain = MultiRetrievalQAChain.from_retrievers(ChatOpenAI(temperature=0), retriever_infos, verbose=True)\n# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u0435 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0442\u043e\u0439\u043e\u0442\u0430 \u043a\u043e\u0440\u043e\u043b\u043b\u0430 (\u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0445 \u0438\u0442\u043e\u0433\u0430\u0445 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u0430 \u0431\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439 \u0442\u043e\u0439\u043e\u0442\u0430 \u043a\u043e\u0440\u043e\u043b\u043b\u0430)\n\n\n\nprint(chain.invoke(\"\u041a\u0430\u043a\u0430\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u043a\u043e\u0440\u043e\u043b\u043b\u0430 \u041a\u041e\u041c\u0424\u041e\u0420\u0422(\u041c\u0422)?\"))\n# \u0437\u0430\u0434\u0430\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430\u044f \u0411\u0417\n\nprint(chain.invoke(\"\u041a\u0430\u043a\u043e\u0439 \u0440\u0430\u0437\u0433\u043e\u043d 0-100 \u043a\u043c/\u0447 (\u0441\u0435\u043a)  \u0443 Land Cruiser?\"))\n# \u0437\u0430\u0434\u0430\u0435\u043c \u0432\u043e\u043f\u0440\u043e\u0441, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430\u044f \u0411\u0417\n\nprint(chain.invoke(\"\u041a\u0430\u043a\u043e\u0439 \u0422\u0438\u043f \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0443 Land Cruiser?\"))", "metadata": {"subid": 2, "total": 3, "source": "https://colab.research.google.com/drive/1vjgjizRzwgwbxEpf6-ZTFVpve6RgF7B3?usp=sharing"}}}]