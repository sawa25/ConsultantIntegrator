[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n\n## SaluteSpeech \u043e\u0442 \u0421\u0431\u0435\u0440\u0431\u0430\u043d\u043a\u0430\nhttps://developers.sber.ru/portal/products/smartspeech?ysclid=lvrx8hdbln916272381\n### \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\nimport uuid\n\nimport time\n\nimport requests\n\nfrom IPython.display import Audio\n\n### \u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\nCLIENT_ID = \"fc11f1f8-0a6d-4fe5-9be6-a8b72e5d1897\"\n\nSCOPE = \"SALUTE_SPEECH_PERS\"\n\nCLIENT_SECRET = \"6a0bdf4e-fda7-46bf-b0ed-d6c91af8d448\"\n\nAUTHORIZATION_DATA = \"ZmMxMWYxZjgtMGE2ZC00ZmU1LTliZTYtYThiNzJlNWQxODk3OjZhMGJkZjRlLWZkYTctNDZiZi1iMGVkLWQ2YzkxYWY4ZDQ0OA==\"\n\n### \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f TTS \u043f\u0430\u0439\u043f\u043b\u0430\u0439\u043d\u0430\ntoken = \"\"\n\ntoken_experation_date = 1234\nint(time.time() * 1000)\nclass Token:\n\n\n\n  def __init__(self):\n\n    self.__data: str = \"\"\n\n    self.__exp_time_ms: int = 0\n\n    self.__update()\n\n\n\n  def __update(self):\n\n    url = \"https://ngw.devices.sberbank.ru:9443/api/v2/oauth\"\n\n\n\n    headers = {\n\n      \"Authorization\": f\"Basic {AUTHORIZATION_DATA}\",\n\n      \"RqUID\": str(uuid.uuid4()),\n\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n\n    }\n\n\n\n    data = f\"scope={SCOPE}\"\n\n\n\n    resp = requests.post(url, data, headers=headers, verify=False)\n\n    self.__data = resp.json()[\"access_token\"]\n\n    self.__exp_time_ms = resp.json()[\"expires_at\"]\n\n\n\n  def __expired(self):\n\n    return self.__exp_time_ms > int(time.time() * 1000)\n\n\n\n  def __str__(self):\n\n    if self.__expired(): self.__update()\n\n    return self.__data\n\n\n\n  def __repr__(self):\n\n    return str(self)\ntoken = Token()\n\ntoken\ndef synthesize(text: str, token: Token, *, voice: str = \"Bys_24000\", use_ssml: bool = True):\n\n  url = \"https://smartspeech.sber.ru/rest/v1/text:synthesize\"\n\n\n\n  headers = {\n\n    \"Authorization\": f\"Bearer {token}\",\n\n    \"Content-Type\": \"application/ssml\" if use_ssml else \"application/text\"\n\n  }\n\n\n\n  params = {\n\n      \"format\": \"wav16\",\n\n      \"voice\": voice\n\n  }\n\n\n\n  resp = requests.post(url, data=text.encode(), params=params, headers=headers, verify=False)\n\n  return resp\ndef save_wav(dst: str, data: bytes):\n\n  with open(dst, \"wb\") as file:\n\n    file.write(data)\ndef predict(text: str, dst: str, token: Token, **kwargs):\n\n  resp = synthesize(text, token, **kwargs)\n\n  save_wav(dst, resp.content)\n\n  return Audio(filename=dst)\ntext = \"\"\"\u00ab\u0421\u0431\u0435\u0440\u0431\u0430\u0301\u043d\u043a\u00bb \u2014 \u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u0439 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0433\u043b\u043e\u043c\u0435\u0440\u0430\u0442, \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0439 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0430\u043d\u043a \u0420\u043e\u0441\u0441\u0438\u0438 \u0438 \u0412\u043e\u0441\u0442\u043e\u0447\u043d\u043e\u0439 \u0415\u0432\u0440\u043e\u043f\u044b.\n\n\u041f\u043e \u0438\u0442\u043e\u0433\u0430\u043c 2023 \u0433\u043e\u0434\u0430 \u0443 \u0421\u0431\u0435\u0440\u0431\u0430\u043d\u043a\u0430 108,5 \u043c\u043b\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 3,2 \u043c\u043b\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.\"\"\"\n\n\n\npredict(text, \"new_audio.wav\", token, use_ssml=0)\n\n### SSML - Speech Synthesis Markup Language\n#### \u041f\u0430\u0443\u0437\u044b \u0438 \u0430\u043b\u0438\u0430\u0441\u044b\ntext = \"\"\"\n\n<speak>\n\n  \u00ab\u0421\u0431\u0435\u0440\u0431\u0430\u0301\u043d\u043a\u00bb \u2014 \u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u0439 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0433\u043b\u043e\u043c\u0435\u0440\u0430\u0442,\n\n    <break time=\"1000ms\" />\n\n  \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0439 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0430\u043d\u043a \u0420\u043e\u0441\u0441\u0438\u0438 \u0438 \u0412\u043e\u0441\u0442\u043e\u0447\u043d\u043e\u0439 \u0415\u0432\u0440\u043e\u043f\u044b.\n\n  \u041f\u043e \u0438\u0442\u043e\u0433\u0430\u043c 2023 \u0433\u043e\u0434\u0430 \u0443 \u0421\u0431\u0435\u0440\u0431\u0430\u043d\u043a\u0430 108,5 \u043c\u043b\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438\n\n    <break strength=\"medium\" />\n\n    <sub alias=\"\u0442\u0440\u0438 \u0438 \u0434\u0432\u0430\">3,2</sub>\n\n  \u043c\u043b\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.\n\n</speak>\"\"\"\n\n\n\npredict(text, \"new_audio.wav\", token)\n\n#### \u0413\u0440\u043e\u043c\u043a\u043e\u0441\u0442\u044c, \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c, \u0442\u043e\u043d\ntext = \"\"\"\n\n<speak>\n\n  \u00ab\u0421\u0431\u0435\u0440\u0431\u0430\u043d\u043a\u00bb \u2014 <paint pitch=\"1\" speed=\"1\">\u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u0439 \u0444\u0438\u043d\u0430\u043d\u0441\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0433\u043b\u043e\u043c\u0435\u0440\u0430\u0442,</paint>\n\n  \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0439 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0430\u043d\u043a \u0420\u043e\u0441\u0441\u0438\u0438 \u0438 \u0412\u043e\u0441\u0442\u043e\u0447\u043d\u043e\u0439 \u0415\u0432\u0440\u043e\u043f\u044b.\n\n  \u041f\u043e \u0438\u0442\u043e\u0433\u0430\u043c 2023 \u0433\u043e\u0434\u0430 \u0443 \u0421\u0431\u0435\u0440\u0431\u0430\u043d\u043a\u0430 108,5 \u043c\u043b\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 3,2\n\n  \u043c\u043b\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.\n\n</speak>\"\"\"\n\n\n\npredict(text, \"new_audio.wav\", token)\n\n#### \u0414\u0430\u0442\u044b\ntext = \"\"\"\n\n<speak>\n\n  \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u044b \u0432 \u0420\u043e\u0441\u0441\u0438\u0438 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f 17.03.24\n\n</speak>\"\"\"\n\n\n\npredict(text, \"new_audio.wav\", token, voice=\"Nec_24000\")\ntext = \"\"\"\n\n<speak>\n\n  <extra.fulldate>\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u044b \u0432 \u0420\u043e\u0441\u0441\u0438\u0438 \u043e\u0436\u0438\u0434\u0430\u044e\u0442\u0441\u044f 37.03.24</extra.fulldate>\n\n</speak>\"\"\"\n\n\n\npredict(text, \"new_audio.wav\", token, voice=\"Nec_24000\")\nresp = synthesize(text, token)\nresp.json()\n\n#### \u0418\u043d\u0442\u043e\u043d\u0430\u0446\u0438\u044f\ntext = \"\"\"\n\n<speak>\n\n  *\u00ab\u0421\u0431\u0435'\u0440\u0431\u0430\u043d\u043a\u00bb \u2014 \u0440\u043e'\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u0439 \u0444\u0438\u043d\u0430\u043d\u0441\u043e'\u0432\u044b\u0439 \u043a\u043e\u043d\u0433\u043b\u043e\u043c\u0435'\u0440\u0430\u0442,\n\n  \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0439 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0430\u043d\u043a *\u0420\u043e\u0441\u0441\u0438\u0438 \u0438 *\u0412\u043e\u0441\u0442\u043e\u0447\u043d\u043e\u0439 \u0415\u0432\u0440\u043e\u043f\u044b.\n\n  \u041f\u043e \u0438\u0442\u043e\u0433\u0430\u043c 2023 \u0433\u043e\u0434\u0430 \u0443 \u0421\u0431\u0435\u0440\u0431\u0430\u043d\u043a\u0430 108,5 \u043c\u043b\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0447\u0430\u0441\u0442\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 3,2\n\n  \u043c\u043b\u043d \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.\n\n</speak>\"\"\"\n\n\n\npredict(text, \"new_audio.wav\", token, voice=\"Nec_24000\")\n\n#### \u0411\u0443\u043a\u0432\u0430 \u0451\ntext = \"\"\"\n\n<speak>\n\n  \u042f \u043f\u0440\u0438\u0448\u0451\u043b\n\n</speak>\"\"\"\n\n\n\npredict(text, \"new_audio.wav\", token, voice=\"Nec_24000\")\ntext = \"\"\"\n\n<speak>\n\n  \u042f \u043f\u0440\u0438\u0448\u0435\u043b\n\n</speak>\"\"\"\n\n\n\npredict(text, \"new_audio.wav\", token, voice=\"Nec_24000\")\ntext = \"\"\"\n\n<speak>\n\n  \u042f \u043f\u0440\u0438\u0448\u0435'\u043b\n\n</speak>\"\"\"\n\n\n\npredict(text, \"new_audio.wav\", token, voice=\"Nec_24000\")\n\n\u041d\u0430 \u044d\u0442\u043e\u043c \u0441\u043e \u0421\u0431\u0435\u0440\u043e\u043c \u0432\u0441\u0451.\n\n\n\n\u041f\u0440\u0438 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0438\u0445 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f\u0445, \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c\u0441\u044f [\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439.](https://developers.sber.ru/docs/ru/salutespeech/overview)\n\n\n\n\n---\n\n\n\n\u041b\u0443\u0447\u0448\u0438\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u043e\u0432\u044b\u0435 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0438 \u0432 \u043c\u0438\u0440\u0435 AI - \u044d\u0442\u043e\n\n [GPT \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u0438\u044f](https://neural-university.ru/laboratory_ai?utm_source=laboratory&utm_medium=content)", "metadata": {"subid": 0, "total": 1, "source": "https://colab.research.google.com/drive/1Ac6sSNdH0rK0qfq8ZJQaGNCxAQ7CcCQw?usp=sharing"}}}]