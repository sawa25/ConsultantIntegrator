[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n\n# **Yandex SpeechKit**\n!apt-get -qq install -y sox\n\n**\u041f\u0435\u0440\u0435\u0434 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u044b:**\n\n\n\n1. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 OAuth-\u0442\u043e\u043a\u0435\u043d\u0430. \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043f\u043e [\u0441\u0441\u044b\u043b\u043a\u0435](https://oauth.yandex.ru/authorize?response_type=token&client_id=1a6990aa636648e9b2ef855fa7bec2fb), \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u043c **\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c** \u0438 \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c OAuth-\u0442\u043e\u043a\u0435\u043d\n\n2. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e OAuth-\u0442\u043e\u043a\u0435\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c IAM-\u0442\u043e\u043a\u0435\u043d\n\n3. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043a\u0430\u0442\u0430\u043b\u043e\u0433 \u043d\u0430 [\u0441\u0442\u0430\u0440\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435](https://console.cloud.yandex.ru/cloud) \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f\nfrom getpass import getpass\n\n\n\nOAuth_token = getpass()\n# URL \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430\n\nURL = \"https://iam.api.cloud.yandex.net/iam/v1/tokens\"\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 IAM-\u0442\u043e\u043a\u0435\u043d\u0430 (\u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e request)\n\nimport requests\n\n\n\nheaders = {\"Content-Type\": \"application/json\"}\n\n\n\ndata = {\n\n    \"yandexPassportOauthToken\": OAuth_token\n\n}\n\n\n\nresponse = requests.post(URL, headers=headers, json=data)\n\n\n\nIAM_TOKEN = response.json()[\"iamToken\"]\n\nexpiresAt = response.json()[\"expiresAt\"]\n\n\n\nprint(f'\u0412\u0430\u0448 \u0442\u043e\u043a\u0435\u043d: {IAM_TOKEN}')\n\nprint(f'\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u0435\u043d \u0434\u043e: {expiresAt}')\n# \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430\n\nID_FOLDER = 'b1gtif2qnbom0fhq1vn7'\n\n**\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0433\u043e\u043b\u043e\u0441\u0430 (\u044f\u0437\u044b\u043a: \u0440\u0443\u0441\u0441\u043a\u0438\u0439)**\n\n\n\n[\u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0433\u043e\u043b\u043e\u0441\u043e\u0432](https://cloud.yandex.ru/docs/speechkit/tts/voices)\n\n\n\n| \u0413\u043e\u043b\u043e\u0441 | \u041f\u043e\u043b | \u0410\u043c\u043f\u043b\u0443\u0430 |\n\n| :- | -: | :-: |\n\n|alena| \u0416 | (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e) \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u2014 neutral\n\n| | | \u0440\u0430\u0434\u043e\u0441\u0442\u043d\u0430\u044f \u2014 good |\n\n|filipp| \u041c |\n\n|ermil| \u041c | (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e) \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u2014 neutral |\n\n| | | \u0440\u0430\u0434\u043e\u0441\u0442\u043d\u044b\u0439 \u2014 good|\n\n|jane| \u0416\t| (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e) \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u2014 neutral |\n\n| | | \u0440\u0430\u0434\u043e\u0441\u0442\u043d\u0430\u044f \u2014 good |\n\n| | | \u0440\u0430\u0437\u0434\u0440\u0430\u0436\u0435\u043d\u043d\u0430\u044f \u2014 evil |\n\n|madirus| \u041c |\n\n|omazh| \u0416\t| (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e) \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u0430\u044f \u2014 neutral |\n\n| | | \u0440\u0430\u0437\u0434\u0440\u0430\u0436\u0435\u043d\u043d\u0430\u044f \u2014 evil |\n\n|zahar| \u041c\t| (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e) \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u2014 neutral |\n\n| | | \u0440\u0430\u0434\u043e\u0441\u0442\u043d\u044b\u0439 \u2014 good|\n## madirus\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438\n\nphrase = '''\n\n\u041c\u043e\u0440\u043e\u0437 \u0438 \u0441\u043e\u043b\u043d\u0446\u0435; \u0434\u0435\u043d\u044c \u0447\u0443\u0434\u0435\u0441\u043d\u044b\u0439!\n\n\u0415\u0449\u0435 \u0442\u044b \u0434\u0440\u0435\u043c\u043b\u0435\u0448\u044c, \u0434\u0440\u0443\u0433 \u043f\u0440\u0435\u043b\u0435\u0441\u0442\u043d\u044b\u0439 \u2014\n\n\u041f\u043e\u0440\u0430, \u043a\u0440\u0430\u0441\u0430\u0432\u0438\u0446\u0430, \u043f\u0440\u043e\u0441\u043d\u0438\u0441\u044c:\n\n\u041e\u0442\u043a\u0440\u043e\u0439 \u0441\u043e\u043c\u043a\u043d\u0443\u0442\u044b \u043d\u0435\u0433\u043e\u0439 \u0432\u0437\u043e\u0440\u044b\n\n\u041d\u0430\u0432\u0441\u0442\u0440\u0435\u0447\u0443 \u0441\u0435\u0432\u0435\u0440\u043d\u043e\u0439 \u0410\u0432\u0440\u043e\u0440\u044b,\n\n\u0417\u0432\u0435\u0437\u0434\u043e\u044e \u0441\u0435\u0432\u0435\u0440\u0430 \u044f\u0432\u0438\u0441\u044c!\n\n'''\n\n\n\n# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0434\u0438\u043a\u0442\u043e\u0440\u0430\n\nvoice = 'madirus'\n\n\n\n# \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0430\u043c\u043f\u043b\u0443\u0430\n\nemotion = 'neutral'\ndef synthesize(folder_id, iam_token, text, voice, emotion):\n\n    url = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'\n\n    headers = {\n\n        'Authorization': 'Bearer ' + iam_token,\n\n    }\n\n\n\n    data = {\n\n        'text': text,\n\n        'lang': 'ru-RU',\n\n        'voice': voice,\n\n        'folderId': folder_id,\n\n        'format': 'lpcm',\n\n        'sampleRateHertz': 48000,\n\n        'emotion': emotion\n\n    }\n\n\n\n    with requests.post(url, headers=headers, data=data, stream=True) as resp:\n\n        if resp.status_code != 200:\n\n            raise RuntimeError(\"Invalid response received: code: %d, message: %s\" % (resp.status_code, resp.text))\n\n\n\n        for chunk in resp.iter_content(chunk_size=None):\n\n            yield chunk\nwith open('result.raw', \"wb\") as f:\n\n    for audio_content in synthesize(ID_FOLDER, IAM_TOKEN, phrase, voice, emotion):\n\n        f.write(audio_content)\n\n\n\n!sox -r 48000 -b 16 -e signed-integer -c 1 result.raw result.wav\nfrom IPython.display import Audio\nAudio('result.wav')\n\n## omazh\n# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0434\u0438\u043a\u0442\u043e\u0440\u0430\n\nvoice = 'omazh'\n\n\n\n# \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0430\u043c\u043f\u043b\u0443\u0430\n\nemotion = 'evil'\nwith open('result.raw', \"wb\") as f:\n\n    for audio_content in synthesize(ID_FOLDER, IAM_TOKEN, phrase, voice, emotion):\n\n        f.write(audio_content)\n\n\n\n!sox -r 48000 -b 16 -e signed-integer -c 1 result.raw result.wav\nAudio('result.wav')\n\n## zahar\n# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0434\u0438\u043a\u0442\u043e\u0440\u0430\n\nvoice = 'zahar'\n\n\n\n# \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0430\u043c\u043f\u043b\u0443\u0430\n\nemotion = 'neutral'\nwith open('result.raw', \"wb\") as f:\n\n    for audio_content in synthesize(ID_FOLDER, IAM_TOKEN, phrase, voice, emotion):\n\n        f.write(audio_content)\n\n\n\n!sox -r 48000 -b 16 -e signed-integer -c 1 result.raw result.wav\nAudio('result.wav')\n\n## jane \u0441 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u043e\u0439 \u0442\u0435\u043a\u0441\u0442\u0430\n# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438\n\nphrase = '''\n\n\u041c\u043e\u0440\u043e\u0437 \u0438 **\u0441\u043e\u043b\u043d\u0446\u0435**; \u0434\u0435\u043d\u044c \u0447\u0443\u0434\u0435\u0441\u043d\u044b\u0439!\n\n\u0415\u0449\u0435 \u0442\u044b \u0434\u0440\u0435\u043c\u043b\u0435\u0448\u044c, **\u0434\u0440\u0443\u0433** \u043f\u0440\u0435\u043b\u0435\u0441\u0442\u043d\u044b\u0439 \u2014 sil<[300]>\n\n**\u041f\u043e\u0440\u0430**, \u043a\u0440\u0430\u0441\u0430\u0432\u0438\u0446\u0430, \u043f\u0440\u043e\u0441\u043d\u0438\u0441\u044c: sil<[300]>\n\n\u041e\u0442\u043a\u0440\u043e\u0439 \u0441\u043e\u043c\u043a\u043d+\u0443\u0442\u044b \u043d\u0435\u0433\u043e\u0439 \u0432\u0437\u043e\u0440\u044b sil<[200]>\n\n\u041d\u0430\u0432\u0441\u0442\u0440\u0435\u0447\u0443 \u0441\u0435\u0432\u0435\u0440\u043d\u043e\u0439 \u0410\u0432\u0440\u043e\u0440\u044b,\n\n\u0417\u0432\u0435\u0437\u0434\u043e\u044e **\u0441\u0435\u0432\u0435\u0440\u0430** \u044f\u0432\u0438\u0441\u044c!\n\n'''\n\n\n\n# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u0434\u0438\u043a\u0442\u043e\u0440\u0430\n\nvoice = 'jane'\n\n\n\n# \u0423\u0441\u0442\u0430\u043d\u043e\u0438\u043c \u0430\u043c\u043f\u043b\u0443\u0430\n\nemotion = 'evil'\n\n\n\nwith open('result.raw', \"wb\") as f:\n\n    for audio_content in synthesize(ID_FOLDER, IAM_TOKEN, phrase, voice, emotion):\n\n        f.write(audio_content)\n\n\n\n!sox -r 48000 -b 16 -e signed-integer -c 1 result.raw result2.wav\n\nAudio('result2.wav')\n\n\n\n\u0418\u0442\u0430\u043a Yandex \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442:\n\n* \u0412\u044b\u0431\u043e\u0440 \u0433\u043e\u043b\u043e\u0441\u0430\n\n* \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0430\u043c\u043f\u043b\u0443\u0430\n\n* \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u043c\u0431\u0440\u043e\u043c \u0433\u043e\u043b\u043e\u0441\u0430\n\n* \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u043d\u043e\u0448\u0435\u043d\u0438\u0435\u043c\n\n* \u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0438 \u0413\u0440\u043e\u043c\u043a\u043e\u0441\u0442\u044c\n\n\n\nhttps://yandex.cloud/ru/docs/speechkit/tts/#role\n\n\n\n\n\n* \u0422\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f SpeechKit Brand Voice \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u043e\u043b\u043e\u0441\u0430\n\nhttps://yandex.cloud/ru/docs/speechkit/tts/brand-voice/\n\n\n\n\n\n**\u041c\u0438\u043d\u0443\u0441\u044b:**\n\n\n\n\u041c\u0435\u043d\u0435\u0435 \u0443\u0434\u043e\u0431\u043d\u043e, \u0447\u0435\u043c ElevenLabs, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0435\u0442 \u043e\u0431\u0435\u0440\u0442\u043a\u0438 Python", "metadata": {"subid": 0, "total": 1, "source": "https://colab.research.google.com/drive/1-ERXMZUTzJxx1lqasd7ea-IvRsCxDUlX?usp=sharing"}}}]