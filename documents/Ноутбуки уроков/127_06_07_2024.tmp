[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n\n# \u0417\u0430\u0434\u0430\u0447\u0430\nhttps://python.langchain.com/v0.1/docs/modules/data_connection/vectorstores/\n\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u0441\u043a\u0430\u0437\u043a\u0438 \u0432 \u0441\u0442\u0438\u043b\u0435 \u041b. \u041a\u044d\u0440\u0440\u043e\u043b\u043b\u0430 \u0438 \u0432 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u0412. \u0417\u0435\u043b\u0430\u043d\u0434\u0430. \u042d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b \u0418\u0418 \u0432 \u043b\u0438\u0442\u0435\u0440\u0430\u0442\u0443\u0440\u043d\u043e\u043c \u0442\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u0435 \u0438 \u043f\u0440\u043e\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u0434\u0443\u0445\u043e\u0432\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430, \u0441\u0430\u043c\u043e\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u044f \u0438 \u0441\u0430\u043c\u043e\u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438.\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u0411\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e 4 \u043c\u043e\u0434\u0435\u043b\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430, \u043a\u0430\u043a \u0443\u0437\u043a\u0438\u0439 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442, \u0440\u0435\u0448\u0430\u044e\u0449\u0438\u0439 \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0432\u043e\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u0411\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u044d\u0442\u0430\u043f\u044b:\n\n1. \u0412 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0441\u043a\u0430\u0437\u043a\u0438.\n\n2. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441.\n\n3. \u0410\u043d\u0430\u043b\u0438\u0437 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 4 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438:\n\n- \u041c\u043e\u0434\u0435\u043b\u044c 1 (\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0438 \u0441\u044e\u0436\u0435\u0442\u0443): \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u0438 \u0441\u044e\u0436\u0435\u0442\u043d\u044b\u0435 \u043b\u0438\u043d\u0438\u0438.\n\n- \u041c\u043e\u0434\u0435\u043b\u044c 2 (\u0424\u0438\u043b\u043e\u0441\u043e\u0444, \u044d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0441\u043c\u044b\u0441\u043b\u0443): \u0412\u0432\u043e\u0434\u0438\u0442 \u0444\u0438\u043b\u043e\u0441\u043e\u0444\u0441\u043a\u0438\u0435 \u0438\u0434\u0435\u0438 \u0438 \u0441\u043c\u044b\u0441\u043b\u043e\u0432\u044b\u0435 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438.\n\n- \u041c\u043e\u0434\u0435\u043b\u044c 3 (\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u0433\u0435\u0440\u043e\u044f\u043c \u0438 \u0434\u0438\u0430\u043b\u043e\u0433\u0430\u043c): \u0420\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u044b \u0433\u0435\u0440\u043e\u0435\u0432 \u0438 \u0434\u0438\u0430\u043b\u043e\u0433\u0438.\n\n- \u041c\u043e\u0434\u0435\u043b\u044c 4 ( \u0420\u0435\u0434\u0430\u043a\u0442\u043e\u0440): \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0441\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043a\u0430\u0437\u043a\u0443.\n\n4. \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043a\u0430\u0437\u043a\u0438\n\n\u0411\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439: \u0422\u0435\u043a\u0441\u0442\u044b \u041b\u044c\u044e\u0438\u0441\u0430 \u041a\u044d\u0440\u0440\u043e\u043b\u043b\u0430: \u00ab\u0410\u043b\u0438\u0441\u0430 \u0432 \u0421\u0442\u0440\u0430\u043d\u0435 \u0427\u0443\u0434\u0435\u0441\u00bb \u0438 \u00ab\u0410\u043b\u0438\u0441\u0430 \u0432 \u0417\u0430\u0437\u0435\u0440\u043a\u0430\u043b\u044c\u0435\u00bb.\n\n\u0422\u0435\u043a\u0441\u0442\u044b \u0412\u0430\u0434\u0438\u043c\u0430 \u0417\u0435\u043b\u0430\u043d\u0434\u0430: \u00ab\u0422\u0430\u0444\u0442\u0438 \u0416\u0440\u0438\u0446\u0430\u00bb, \u00ab\u0413\u0443\u043b\u044f\u043d\u044c\u0435 \u0436\u0438\u0432\u044c\u0435\u043c \u0432 \u043a\u0438\u043d\u043e\u043a\u0430\u0440\u0442\u0438\u043d\u0435\u00bb, \u00ab\u0422\u0430\u0444\u0442\u0438 \u0416\u0440\u0438\u0446\u0430 2. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u043c\u0438\u00bb.\n\n\n\n\n\n\u042d\u0442\u0430 \u0431\u0430\u0437\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u0430\u043a \u043e\u0431\u0440\u0430\u0437\u0435\u0446 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u043e\u0439 \u0441\u043a\u0430\u0437\u043a\u0438, \u0441\u043e\u0431\u043b\u044e\u0434\u0430\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0445\u0443\u0434\u043e\u0436\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f: \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438, \u0441\u044e\u0436\u0435\u0442\u0430, \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0438, \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u0438 \u0432\u0442\u043e\u0440\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u044b\u0445 \u0433\u0435\u0440\u043e\u0435\u0432\n\n\n\n\n\n\u043f\u043e \u043e\u0431\u0440\u0430\u0437\u0446\u0443 1 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044e, \u0441\u044e\u0436\u0435\u0442, \u0442\u0435\u043c\u044b \u0438 \u0433\u0435\u0440\u043e\u0435\u0432\n\n\n\n\n\n\u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u044d\u0442\u0443 \u0431\u0430\u0437\u0443 \u043f\u043e\u0434\u0430\u0442\u044c \u0432\u043e 2, 3 \u0438 4 \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438 \u0431\u0443\u0434\u0435\u0442 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0441\u043a\u0430\u0437\u043a\u0443\n# \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\n!pip install -q tiktoken==0.7.0 openai langchain langchain-openai langchain-text-splitters >/dev/null\n\n!pip install langchain_community >/dev/null\n\n!pip install --upgrade --quiet  langchain-qdrant >/dev/null\nimport openai\n\nfrom openai import OpenAI\n\nimport tiktoken\n\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter, MarkdownHeaderTextSplitter\n\nfrom langchain.docstore.document import Document\n\nfrom langchain_openai import OpenAIEmbeddings\n\nfrom langchain.vectorstores import Qdrant\n\n\n\nimport os\n\nimport re\n\nimport requests\nfrom google.colab import userdata\n\nkey = userdata.get('OpenAI') # \u0437\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u043a\u0440\u0435\u0442\u0430 \u043a\u043e\u043b\u0430\u0431\u0430 \u043d\u0430 \u0441\u0432\u043e\u0435 (\u0434\u043b\u044f \u043a\u043b\u044e\u0447\u0430 \u041e\u043f\u0435\u043d\u042d\u0439\u0410\u0439)\n\nos.environ[\"OPENAI_API_KEY\"] = key\n\nclient = OpenAI()\nMODEL = 'gpt-4o'\n# @title \u0424\u0443\u043d\u043a\u0446\u0438\u0438\n\n\n\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 \u0438\u0437 \u0433\u0443\u0433\u043b \u0434\u0440\u0430\u0439\u0432\n\ndef load_document_text(url: str) -> str:\n\n    # Extract the document ID from the URL\n\n    match_ = re.search('/document/d/([a-zA-Z0-9-_]+)', url)\n\n    if match_ is None:\n\n        raise ValueError('Invalid Google Docs URL')\n\n    doc_id = match_.group(1)\n\n\n\n    # Download the document as plain text\n\n    response = requests.get(f'https://docs.google.com/document/d/{doc_id}/export?format=txt')\n\n    response.raise_for_status()\n\n    text = response.text\n\n\n\n    return text\n\n\n\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432\n\ndef num_tokens(str_, model=MODEL):\n\n    try:\n\n        encoding = tiktoken.encoding_for_model(model)\n\n    except KeyError:\n\n        encoding = tiktoken.get_encoding('cl100k_base')\n\n    num_tokens = len(encoding.encode(str_))\n\n    return num_tokens\n\n\n\n#@title \u0421\u043f\u043b\u0438\u0442\u0442\u0435\u0440 (\u0444\u0443\u043d\u043a\u0446\u0438\u044f)\n\ndef split_doc( text_, max_tokens=100, markdown_max_level=4):\n\n  # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 text_ \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 \u0434\u043b\u0438\u043d\u044b max_tokens,\n\n  # \u0415\u0441\u043b\u0438 \u0442\u0435\u043a\u0441\u0442 \u043c\u0435\u043d\u044c\u0448\u0435  max_tokens, \u0442\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u0430\u043a \u0435\u0441\u0442\u044c,\n\n  # \u0438\u043d\u0430\u0447\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 MarkdownHeaderTextSplitter \u0434\u043e \u0443\u0440\u043e\u0432\u043d\u044f markdown_max_level,\n\n  # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0447\u0430\u043d\u043a\u0438 (\u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 max_tokens) \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 RecursiveCharacterTextSplitter,\n\n  # \u0432 \u0442\u0435\u043b\u043e \u0447\u0430\u043d\u043a\u043e\u0432 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0432 \u0438\u0445 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438\n\n  # \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043b\u0430\u043d\u0433\u0447\u0435\u0439\u043d:\n\n  #   \u0432 page_content \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0447\u0430\u043d\u043a\u0438,\n\n  #   \u0432 meta_data - \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u043c\u0430\u0440\u043a\u0434\u0430\u0443\u043d, \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n\n\n\n    chunk_list = []\n\n    #headers_to_split_on = [(f\"{'#' * i}\", f\"H{i}\") for i in range(1, markdown_max_level+1)]\n\n    headers_to_split_on = [\n\n        ('#','group'),\n\n        ('##','subgroup'),\n\n        ('###','subsubgroup'),\n\n        ('####','items')\n\n    ]\n\n    markdown_splitter = MarkdownHeaderTextSplitter(headers_to_split_on=headers_to_split_on)\n\n    chunks = markdown_splitter.split_text(text_)\n\n\n\n    for chunk in chunks:\n\n            headers = ''\n\n            ch_txt = chunk.page_content\n\n\n\n\n\n            for header_key in list(chunk.metadata):\n\n                headers += f'\\n{header_key}: {chunk.metadata[header_key]}'\n\n            pcont = f'{headers}\\n{ch_txt}'\n\n            chunk_len = num_tokens(pcont)\n\n\n\n            if chunk_len > max_tokens:\n\n                r_splitter = RecursiveCharacterTextSplitter(separators = [\"\\n\\n\", \"\\n\"],\n\n                                                            chunk_size = max_tokens - num_tokens(headers),\n\n                                                            chunk_overlap = 0,\n\n                                                            length_function = lambda x: num_tokens(x))\n\n                parts = r_splitter.split_text(pcont)\n\n                for k, part in enumerate(parts):\n\n                    if k == 0: # \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0447\u0430\u043d\u043a\u0435 \u0435\u0441\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 (\u043e\u0442 \u043c\u0430\u0440\u043a\u0434\u0430\u0443\u043d-\u0447\u0430\u043d\u043a\u0430)\n\n                        ppcont = part\n\n                    else:\n\n                        ppcont = f'\u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435 {k}{headers}\\n{part}'\n\n                    metadata = chunk.metadata\n\n                    metadata['tokens'] =  num_tokens(ppcont)\n\n                    metadata['part_num'] =  k+1\n\n                    chunk_list.append(Document(page_content=ppcont, metadata=metadata))\n\n            else:\n\n                metadata = chunk.metadata\n\n                metadata['tokens'] =  chunk_len\n\n                chunk_list.append(Document(page_content=pcont, metadata=metadata))\n\n\n\n    return chunk_list\nmarkdawn = load_document_text(\"https://docs.google.com/document/d/1OmyYe6mKB8ZF4ZZzzBk6p0GLmvi9oofBWnfcp_99w-A/edit?usp=sharing\")\n#@title \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u043d\u0430 \u0447\u0430\u043d\u043a\u0438\n\nsource_chunks = split_doc(markdawn,1024, markdown_max_level=4)\nprint(len(source_chunks))\n\nprint(source_chunks[3])\n\n## \u0421 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439\nembeddings = OpenAIEmbeddings()\nqdrant = Qdrant.from_documents(\n\n    source_chunks,\n\n    embeddings,\n\n    location=\":memory:\",  # Local mode with in-memory storage only\n\n    collection_name=\"\u041d\u043e\u043c1\",\n\n)\nquery = \"\u041a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044f\"\n\nfound_docs = qdrant.similarity_search(query)\nfor doc in found_docs:\n\n  print(doc.page_content)\n\n# \u0411\u0443\u0434\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c\n\nfrom qdrant_client.http import models as rest\n\n\n\nfilter_condition = rest.FieldCondition(\n\n    key='metadata.group',   # \u0437\u0434\u0435\u0441\u044c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u044e\u0447 \u0432 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u043e \u0438 \u0441\u0430\u043c\u0438 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 (\u043a\u0430\u043a \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0442.\u043a. \u0435\u0441\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b)\n\n    match=rest.MatchValue(value='instruments')\n\n)\n\n\n\nquery_filter = rest.Filter(must=[filter_condition])\n\n\n\nfound_docs = qdrant.similarity_search(query, filter=query_filter)\n\n# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u0442 \u043c\u043e\u0434\u0435\u043b\u0438\n\ndef answer_index(system, user, chunk, temp=1, model=MODEL):\n\n    docs = ''\n\n    for doc in chunk:\n\n     docs += f'\\n{doc.page_content}'\n\n\n\n    messages = [\n\n        {'role': 'system', 'content': system},\n\n        {'role': 'user', 'content': user + f'\u0414\u043e\u043f \u0438\u043d\u0444\u043e: {docs}'}\n\n    ]\n\n\n\n    completion = client.chat.completions.create(\n\n        model=model,\n\n        messages=messages,\n\n        temperature=temp\n\n    )\n\n\n\n    answer = completion.choices[0].message.content\n\n    return answer\n### \u0410\u0441\u0441\u0438\u0441\u0442\u0435\u043d\u0442 \u043f\u0440\u043e\u043c\u0442 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 1 (\u042d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0438 \u0441\u044e\u0436\u0435\u0442\u0443):\n\nuser_mod1 = '''\n\n1. \u0421\u043e\u0437\u0434\u0430\u0439 \u043d\u043e\u0432\u0443\u044e \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0438 \u0441\u044e\u0436\u0435\u0442\u043d\u0443\u044e \u043b\u0438\u043d\u0438\u044e \u0434\u043b\u044f \u0441\u043a\u0430\u0437\u043a\u0438.\n\n2. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438 \u0433\u043b\u0430\u0432\u043d\u044b\u0435 \u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u043a\u0430\u0437\u043a\u0435.\n\n3. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0439 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0438 \u0432\u0442\u043e\u0440\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439.\n\n4. \u041e\u043f\u0438\u0448\u0438 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044f \u0441\u044e\u0436\u0435\u0442\u0430.\n\n'''\nsystem_mod1 = '''\n\n\u0422\u044b \u2014 \u044d\u043a\u0441\u043f\u0435\u0440\u0442 \u043f\u043e \u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0438 \u0441\u044e\u0436\u0435\u0442\u0443, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0441\u043a\u0430\u0437\u043e\u043a \u0432 \u0441\u0442\u0438\u043b\u0435 \u041b\u044c\u044e\u0438\u0441\u0430 \u041a\u044d\u0440\u0440\u043e\u043b\u043b\u0430 \u0438 \u0432 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u0412\u0430\u0434\u0438\u043c\u0430 \u0417\u0435\u043b\u0430\u043d\u0434\u0430.\n\n\u0422\u0432\u043e\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0441\u043a\u0430\u0437\u043e\u043a \u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b, \u0441\u044e\u0436\u0435\u0442\u043d\u044b\u0435 \u043b\u0438\u043d\u0438\u0438, \u0442\u0435\u043c\u044b \u0438 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0435\u0439.\n\n\u0422\u044b \u0437\u043d\u0430\u0435\u0448\u044c, \u0447\u0442\u043e\n\n#### \u0421\u0442\u0438\u043b\u044c \u041b\u044c\u044e\u0438\u0441\u0430 \u041a\u044d\u0440\u0440\u043e\u043b\u043b\u0430:\n\n- \u0424\u0430\u043d\u0442\u0430\u0437\u0438\u044f \u0438 \u0430\u0431\u0441\u0443\u0440\u0434.\n\n- \u041d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435.\n\n- \u041d\u0435\u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0438 \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u0436\u0438.\n\n\n\n#### \u0422\u0435\u043c\u0430\u0442\u0438\u043a\u0430 \u0412\u0430\u0434\u0438\u043c\u0430 \u0417\u0435\u043b\u0430\u043d\u0434\u0430:\n\n- \u0421\u0430\u043c\u043e\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435 \u0438 \u0434\u0443\u0445\u043e\u0432\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a.\n\n- \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u043e\u0441\u043e\u0437\u043d\u0430\u043d\u043d\u043e\u0435 \u0432\u043e\u0441\u043f\u0440\u0438\u044f\u0442\u0438\u0435.\n\n- \u0414\u0443\u0445\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0438 \u0444\u0438\u043b\u043e\u0441\u043e\u0444\u0441\u043a\u0438\u0435 \u0438\u0434\u0435\u0438.\n\n\n\n\u0412\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043b\u0435\u0434\u0438 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0435\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0438 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0435\u043c \u0433\u0435\u0440\u043e\u0435\u0432.\n\n'''\nuser_req = '''\n\n\u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439 \u043d\u043e\u0432\u0443\u044e \u0441\u043a\u0430\u0437\u043a\u0443 \u0432 \u0441\u0442\u0438\u043b\u0435 \u041b\u044c\u044e\u0438\u0441\u0430 \u041a\u044d\u0440\u0440\u043e\u043b\u043b\u0430 \u0438 \u0432 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435 \u0412\u0430\u0434\u0438\u043c\u0430 \u0417\u0435\u043b\u0430\u043d\u0434\u0430.\n\n\u041d\u0430 \u0442\u0435\u043c\u0443 \u0441\u0430\u043c\u043e\u043f\u043e\u0437\u043d\u0430\u043d\u0438\u0435.\n\n'''\nanswer = answer_index(system_mod1, user_mod1, found_docs, temp=1)\nprint(answer)\nanswer = answer_index(system_mod1, user_mod1, [], temp=1)\nprint(answer)", "metadata": {"subid": 0, "total": 1, "source": "https://colab.research.google.com/drive/1edhkb08fVs3FOT_M2j-InP2vZHw-1jfD?usp=sharing"}}}]