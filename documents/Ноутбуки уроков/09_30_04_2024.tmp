[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\nfrom google.oauth2.service_account import Credentials\n\nfrom oauth2client.service_account import ServiceAccountCredentials\n\nimport gspread\n\nimport json\n\n\n\nimport pandas as pd\n\nimport numpy as np\n\nfrom datetime import datetime\n\nimport random\nGoogleAPI_path = \"googleAPI_key.json\" # \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u043d\u0430 \u0441\u0432\u043e\u0439-json \u0444\u0430\u0439\u043b \u0441 \u043a\u043b\u044e\u0447\u043e\u043c \u0413\u0443\u0433\u043b\u0430\n\n\n\n# \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u0442\u043a\u0440\u044b\u0442\u0430 \u043d\u0430 \u0437\u0430\u043f\u0438\u0441\u044c (\u043f\u0440\u0430\u0432\u0430 \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435)\n\ngooglesheet_url = \"https://docs.google.com/spreadsheets/d/1JaJL6npVUBoaiFaLWkGO55XdnNxt367LjBcbF5nPT9A/\"\n\n\n\n# \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u043c\u0441\u044f \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443 \u0433\u0443\u0433\u043b\u0430\n\ncredentials = Credentials.from_service_account_file(GoogleAPI_path, scopes=['https://spreadsheets.google.com/feeds'])\n\nclient = gspread.authorize(credentials)\n\n#@title \u0427\u0442\u0435\u043d\u0438\u0435-\u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0433\u0443\u0433\u043b \u0442\u0430\u0431\u043b\u0438\u0446\u0443 (\u041e\u0431\u0440\u0430\u0449\u0430\u0435\u043c\u0441\u044f \u043a \u044f\u0447\u0435\u0439\u043a\u0430\u043c \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 \u0442\u0438\u043f\u0430 \"\u04124\")\n\nsheet_name = \"\u041b\u0438\u0441\u04423\"\n\nlast_row = 15\n\n\n\ninput_column_letter = \"b\"\n\noutput_column_letter = \"D\"\n\noutput_chunk_letter = \"E\"\n\n\n\n# \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043f\u043e URL\n\nspreadsheet = client.open_by_url(googlesheet_url)\n\n# \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043b\u0438\u0441\u0442 \u043f\u043e \u0438\u043c\u0435\u043d\u0438\n\nworksheet = spreadsheet.worksheet(sheet_name)\n\n\n\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0441\u0435 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0438\u0437 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 input_column_letter\n\ndata_values = worksheet.get_all_values()[1:]\n\n\n\nquestions = [row[gspread.utils.a1_to_rowcol(input_column_letter + \"1\")[1] - 1] for row in data_values]\n\n\n\n\n\nfor i, question in enumerate(questions, start = 2):\n\n    if i > last_row:\n\n      break\n\n    if not isinstance(question, str):\n\n      # \u041f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c, \u0435\u0441\u043b\u0438 question \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439\n\n      continue\n\n\n\n    message_chunk, output = question, f'\u043e\u0442\u0432\u0435\u0442_{question}' # answer_index(system_prompt, question, instructions, knowledge_base_index, temperature, verbose, num_fragment, model)\n\n\n\n    # \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n    worksheet.update_cell(i, gspread.utils.a1_to_rowcol(output_column_letter + str(i+1))[1], output)\n\n    worksheet.update_cell(i, gspread.utils.a1_to_rowcol(output_chunk_letter + str(i+1))[1], question)\n\nprint(\"\u0414\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0430 \u043b\u0438\u0441\u0442.\")\n#@title \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u0433\u0443\u0433\u043b \u0442\u0430\u0431\u043b\u0438\u0446\u044b\n\ndef get_cargo(sheet_order, departure, destination, truck_type):\n\n        worksheet = spreadsheet.worksheet(sheet_order)\n\n\n\n        data = worksheet.get_all_values()\n\n        selected_columns_names = ['\u0422\u0438\u043f_\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430', '\u0414\u0430\u0442\u0430_\u043f\u0435\u0440\u0435\u0432\u043e\u0437\u043a\u0438', '\u041e\u0442\u043a\u0443\u0434\u0430', '\u041a\u0443\u0434\u0430', '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c']\n\n        selected_columns_ind = [data[0].index(name) for name in selected_columns_names]\n\n        selected_columns = [[row[i] for i in selected_columns_ind] for row in data[1:]]\n\n        df_partial_1 = pd.DataFrame(selected_columns, columns=selected_columns_names)\n\n\n\n        # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 '\u0414\u0430\u0442\u0430_\u043f\u0435\u0440\u0435\u0432\u043e\u0437\u043a\u0438' \u0432 \u0442\u0438\u043f datetime\n\n        df_partial_1['\u0414\u0430\u0442\u0430_\u043f\u0435\u0440\u0435\u0432\u043e\u0437\u043a\u0438'] = pd.to_datetime(df_partial_1['\u0414\u0430\u0442\u0430_\u043f\u0435\u0440\u0435\u0432\u043e\u0437\u043a\u0438'], dayfirst=True)\n\n        # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0447\u0438\u0441\u043b\u0430\n\n        df_partial_1['\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c'] = pd.to_numeric(df_partial_1['\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c'], errors='coerce')\n\n        # \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0443 \u0438 \u0442\u0438\u043f\u0443 \u0433\u0440\u0443\u0437\u043e\u0432\u0438\u043a\u0430\n\n        filtered_df_g = df_partial_1[(df_partial_1['\u041e\u0442\u043a\u0443\u0434\u0430'].str.lower() == departure.lower()) &\n\n                                   (df_partial_1['\u041a\u0443\u0434\u0430'].str.lower() == destination.lower()) &\n\n                                   (df_partial_1['\u0422\u0438\u043f_\u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u0430'].str.lower() == truck_type.lower())]\n\n\n\n\n\n        # \u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0443 '\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c'\n\n        ave_cost_1 = np.mean(filtered_df_g['\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c'])\n\n        if ave_cost_1 is not None and not np.isnan(ave_cost_1):\n\n            ave_cost = int(round(ave_cost_1))\n\n        else:\n\n            ave_cost = 0\n\n        return [departure, destination, truck_type], ave_cost\nlst = []\n\ncost = 0\n\nlst, cost = get_cargo('orders', '\u0410\u043b\u043c\u0430\u0442\u044b', '\u0418\u0440\u043a\u0443\u0442\u0441\u043a', '\u0422\u0435\u043d\u0442')\nprint(lst)\nprint(cost)\n#@title \u0417\u0430\u043f\u0438\u0441\u044c \u0434\u0430\u043d\u043d\u044b\u0445\n\ndriver_chatid_col = 1\n\nworksheet = spreadsheet.worksheet('drivers')\n\ndrivers = worksheet.col_values(driver_chatid_col)  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439\n\n\n\nri=random.randint(1,100)\n\nworksheet.update_cell(len(drivers)+1, driver_chatid_col, f\"'{ri}\")\n\nworksheet.update_cell(len(drivers)+1, driver_chatid_col+1, f\"{datetime.now().date()}\")", "metadata": {"subid": 0, "total": 1, "source": "https://colab.research.google.com/drive/17QQ5sxK5d3UOePkM2WwtwGCLSb9jOCuX?usp=sharing"}}}]