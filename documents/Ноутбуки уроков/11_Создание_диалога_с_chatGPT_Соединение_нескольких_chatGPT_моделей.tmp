[{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u043b\u043e\u0433\u0430. \u0421\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u044f.\n\u0414\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u043a\u0430\u043f\u043b\u0438\u0432\u0430\u043d\u0438\u044f \u0434\u0438\u0430\u043b\u043e\u0433\u0430 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0435\u0433\u043e \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 chatGPT \u0432\u043c\u0435\u0441\u0442\u0435 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0431\u0430\u0437\u043e\u0439 \u0437\u043d\u0430\u043d\u0438\u0439 \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439. \u0412\u043e\u0442, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c\n!pip install -q langchain_openai==0.1.7 faiss-cpu==1.8.0 openai==1.30.1 tiktoken==0.7.0 langchain_community==0.0.38 langchain==0.0.38 langchain-text-splitters==0.0.2\n# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n\nfrom openai import OpenAI\n\nfrom langchain_openai import OpenAIEmbeddings\n\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter, MarkdownHeaderTextSplitter, CharacterTextSplitter\n\nfrom langchain_community.vectorstores import FAISS\n\nfrom langchain_community.document_loaders import TextLoader\n\nfrom langchain.docstore.document import Document\n\nimport os\n\nimport re\n\nimport requests\n\nimport openai\n\nimport tiktoken\n\nimport matplotlib.pyplot as plt\n\nimport textwrap\n\nfrom textwrap import fill\n\n\n\nimport logging\n\nlogging.getLogger(\"langchain.text_splitter\").setLevel(logging.ERROR)\n# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u0432 \u043a\u043e\u043b\u0430\u0431\u0435\n\nfrom google.colab import userdata\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 API \u043a\u043b\u044e\u0447\u0430 \u0438\u0437 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 Colab \u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0435\u0433\u043e \u043a\u0430\u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441\u0440\u0435\u0434\u044b\n\nkey = userdata.get('OPENAI_API_KEY')\n\nos.environ[\"OPENAI_API_KEY\"] = key\n\n\n\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 OpenAI \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c API \u043a\u043b\u044e\u0447\u0430 \u0438\u0437 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u044b\n\nclient = OpenAI()\n# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 \u0438\u0437 \u0433\u0443\u0433\u043b \u0434\u0440\u0430\u0439\u0432\n\ndef load_document_text(url: str) -> str:\n\n    # Extract the document ID from the URL\n\n    match_ = re.search('/document/d/([a-zA-Z0-9-_]+)', url)\n\n    if match_ is None:\n\n        raise ValueError('Invalid Google Docs URL')\n\n    doc_id = match_.group(1)\n\n\n\n    # Download the document as plain text\n\n    response = requests.get(f'https://docs.google.com/document/d/{doc_id}/export?format=txt')\n\n    response.raise_for_status()\n\n    text = response.text\n\n\n\n    return text\n# \u0411\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0432 langChain\n\ndatabase= load_document_text('https://docs.google.com/document/d/1rihIt6rnBHfrv42C1ALtpoHoS2jIVseCg49aWqsOyk4')\ndatabase[:1000]\n\n\u0414\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u043c \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0431\u0435\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \"#\", \u0447\u0442\u043e\u0431\u044b \u0442\u0435\u043a\u0441\u0442\u044b \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u043d\u0435 \u043f\u0440\u043e\u043f\u0430\u043b\u0438 \u0438\u0437 \u0447\u0430\u043d\u043a\u043e\u0432 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 MarkdownHeaderTextSplitter  \ndef duplicate_headers_without_hashes(text):\n\n    \"\"\"\n\n    \u0414\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435, \u0443\u0431\u0438\u0440\u0430\u044f \u0438\u0437 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u0445\u044d\u0448\u0438.\n\n\n\n    \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n\n    '# \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a' \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0432:\n\n    '# \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a\n\n    \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a'\n\n    \"\"\"\n\n\n\n    # \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u0432 \u0442\u0435\u043a\u0441\u0442\u0435\n\n    def replacer(match):\n\n        # match.group() \u0432\u0435\u0440\u043d\u0435\u0442 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441 \u0445\u044d\u0448\u0430\u043c\u0438.\n\n        # \u0437\u0430\u0442\u0435\u043c \u043c\u044b \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u043d\u0435\u043c\u0443 \u043f\u0435\u0440\u0435\u043d\u043e\u0441 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0442\u0443 \u0436\u0435 \u0441\u0442\u0440\u043e\u043a\u0443, \u043d\u043e \u0431\u0435\u0437 \u0445\u044d\u0448\u0435\u0439\n\n        return match.group() + \"\\n\" + match.group().replace(\"#\", \"\").strip()\n\n\n\n    # re.sub \u0438\u0449\u0435\u0442 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u0432\u0441\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 1 \u0434\u043e 3 \u0445\u044d\u0448\u0435\u0439, \u0438 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0438\u0445\n\n    # \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 replacer\n\n    result = re.sub(r'#{1,3} .+', replacer, text)\n\n\n\n    return result\ndatabase=duplicate_headers_without_hashes(database)\n# \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u0443\u044e \u0411\u0417 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c:\n\nwith open('Postoplan.txt', 'w') as f:\n\n    f.write(database)\n\n\n\nfrom google.colab import files\n\nfiles.download('Postoplan.txt')\ndatabase[:10000]\ndef num_tokens_from_string(string: str, encoding_name: str) -> int:\n\n      \"\"\"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\"\"\"\n\n      encoding = tiktoken.get_encoding(encoding_name)\n\n      num_tokens = len(encoding.encode(string))\n\n      return num_tokens\n\n\n\ndef split_text(text):\n\n    headers_to_split_on = [\n\n        (\"#\", \"Header 1\"),\n\n        (\"##\", \"Header 2\"),\n\n        (\"###\", \"Header 3\"),\n\n    ]\n\n\n\n    markdown_splitter = MarkdownHeaderTextSplitter(headers_to_split_on=headers_to_split_on)\n\n    fragments = markdown_splitter.split_text(text)\n\n\n\n    # \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n\n    fragment_token_counts = [num_tokens_from_string(fragment.page_content, \"cl100k_base\") for fragment in fragments]\n\n    plt.hist(fragment_token_counts, bins=50, alpha=0.5, label='Fragments')\n\n    plt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u043d \u0447\u0430\u043d\u043a\u043e\u0432 \u0432 \u0442\u043e\u043a\u0435\u043d\u0430\u0445')\n\n    plt.xlabel('Token Count')\n\n    plt.ylabel('Frequency')\n\n    plt.show()\n\n\n\n    return fragments\nsource_chunks=split_text(database)\nsource_chunks[1]\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\n\nembeddings = OpenAIEmbeddings()\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u043a\u0441\u0442\u0430\n\ndb = FAISS.from_documents(source_chunks, embeddings)\n\n# \u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0434\u043b\u044f GPT, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u0432 system\n\nsystem= load_document_text('https://docs.google.com/document/d/1K1bQt7V-dVMIfwTK27-YicWrhgVTz8xmvtCrQLjC_d4')\nsystem\ndef answer_index(system, search_query, topic, search_index, verbose=0):\n\n    # \u041f\u043e\u0438\u0441\u043a \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0445 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432 \u0438\u0437 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n\n    docs = search_index.similarity_search(search_query, k=3)\n\n    if verbose:\n\n        print('\\n ===========================================: ')\n\n\n\n    message_content = re.sub(r'\\n{2}', ' ', '\\n '.join([f'\\n\u041e\u0442\u0440\u044b\u0432\u043e\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u2116{i+1}\\n=====================' + doc.page_content + '\\n' for i, doc in enumerate(docs)]))\n\n    if verbose:\n\n        print('message_content :\\n ======================================== \\n', message_content)\n\n\n\n    client = OpenAI()\n\n    messages = [\n\n        {\"role\": \"system\", \"content\": system},\n\n        {\"role\": \"user\", \"content\": f\"\u041e\u0442\u0432\u0435\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443: {message_content}\\n\\n{topic}\"}\n\n    ]\n\n\n\n    if verbose:\n\n        print('\\n ===========================================: ')\n\n\n\n    completion = client.chat.completions.create(\n\n        model=\"gpt-3.5-turbo\",\n\n        messages=messages,\n\n        temperature=0.1\n\n    )\n\n    answer = completion.choices[0].message.content\n\n    return answer\n\n\n\u0414\u0435\u043b\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0438\u0430\u043b\u043e\u0433 \u043f\u043e \u043c\u0435\u0440\u0435 \u0435\u0433\u043e \u043d\u0430\u043a\u0430\u043f\u043b\u0438\u0432\u0430\u043d\u0438\u044f, \u0438 \u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0434\u0435\u043b\u044c \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u043b\u0430 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0434\u0438\u0430\u043b\u043e\u0433\u0430.\ndef summarize_questions(dialog):\n\n    \"\"\"\n\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u0434\u0438\u0430\u043b\u043e\u0433\u0430.\n\n    \"\"\"\n\n    messages = [\n\n        {\"role\": \"system\", \"content\": \"\u0422\u044b - \u043d\u0435\u0439\u0440\u043e-\u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0442\u043e\u0440. \u0422\u0432\u043e\u044f \u0437\u0430\u0434\u0430\u0447\u0430 - \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0438\u0430\u043b\u043e\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0435\u0431\u0435 \u043f\u0440\u0438\u0448\u0435\u043b. \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0437\u0432\u0430\u043b \u0441\u0432\u043e\u0435 \u0438\u043c\u044f, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438 \u0435\u0433\u043e \u0432 \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0434\u0438\u0430\u043b\u043e\u0433\u0435\"},\n\n        {\"role\": \"user\", \"content\": \"\u0421\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0438\u0440\u0443\u0439 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0434\u0438\u0430\u043b\u043e\u0433 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u043d\u0442\u0430 \u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0442\u0435\u0431\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0438\u0437 \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \" + \" \".join(dialog)}\n\n    ]\n\n\n\n    completion = client.chat.completions.create(\n\n        model=\"gpt-3.5-turbo\",     # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c gpt4 \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0442\u043e\u0447\u043d\u043e\u0439 \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n\n        messages=messages,\n\n        temperature=0,          # \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u043d\u0438\u0437\u043a\u0443\u044e \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0443 \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u0438\n\n    )\n\n\n\n    return completion.choices[0].message.content\n\n\u0414\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435. \u0412 \u043d\u0435\u0435 \u043c\u044b \u043f\u043e\u0434\u0430\u0435\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e, \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439, \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0437 \u0447\u0430\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u0434\u0438\u0430\u043b\u043e\u0433\u0430 - \u043f\u0440\u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u0438.\ndef answer_user_question_dialog(system, db, user_question, question_history):\n\n    \"\"\"\n\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n\n    \"\"\"\n\n    summarized_history = \"\"\n\n    # \u0415\u0441\u043b\u0438 \u0432 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u0430, \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c \u0441\u0443\u043c\u043c\u0430\u0440\u0438\u0437\u0430\u0446\u0438\u044e\n\n    if len(question_history) > 0:\n\n        summarized_history = \"\u0412\u043e\u0442 \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0434\u0438\u0430\u043b\u043e\u0433 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c: \" +summarize_questions([q + ' ' + (a if a else '') for q, a in question_history])\n\n\n\n    topic = summarized_history + \" \u0410\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \" + user_question\n\n\n\n    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0442\u043e\u043b\u044c\u043a\u043e user_question \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\n\n    answer_text = answer_index(system, user_question, topic, db)\n\n\n\n    question_history.append((user_question, answer_text if answer_text else ''))\n\n    # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0441\u0430\u043c\u043c\u0430\u0440\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0438\u0434\u0438\u0442 \u043c\u043e\u0434\u0435\u043b\u044c\n\n    if summarized_history:\n\n        print('****************************')\n\n        print(summarized_history)\n\n        print('****************************')\n\n\n\n    return answer_text\n\n\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0434\u0438\u0430\u043b\u043e\u0433 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u0438 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0435\u0433\u043e \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0441\u043b\u043e\u0432\u0430 \"stop\".\ndef run_dialog(system_doc_url, knowledge_base_url):\n\n    \"\"\"\n\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0434\u0438\u0430\u043b\u043e\u0433 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u043d\u0435\u0439\u0440\u043e-\u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u043d\u0442\u043e\u043c.\n\n    \"\"\"\n\n    #\u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439, \u0433\u0434\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u0440\u0442\u0435\u0436 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0430\u0440\u0443 \u0432\u043e\u043f\u0440\u043e\u0441-\u043e\u0442\u0432\u0435\u0442, \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u0435\u0441\u0441\u0438\u0438 \u0434\u0438\u0430\u043b\u043e\u0433\u0430.\n\n    question_history = []\n\n    while True:\n\n        user_question = input('\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c: ')\n\n        if user_question.lower() == 'stop':\n\n            break\n\n        answer = answer_user_question_dialog(system_doc_url, knowledge_base_url, user_question, question_history)\n\n        print('\u041a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u043d\u0442:', textwrap.fill(answer))\n\n\n\n    return\nrun_dialog(system, db)\nrun_dialog(system, db)", "metadata": {"subid": 0, "total": 3, "source": "https://colab.research.google.com/drive/17dBuuXGvtHfu7hxgsCuuDEnWymbnxGr6?usp=sharing"}}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n# \u041d\u0435\u0439\u0440\u043e-\u043f\u0440\u043e\u0434\u0430\u0436\u043d\u0438\u043a \u0438\u0437 3 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 gpt\ndatabase = load_document_text('https://docs.google.com/document/d/199yEDg1EIlTImWjFR4FGRsqw70mjlP85jG8XduD6B24') # \u0431\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439\nsystem_1 = load_document_text('https://docs.google.com/document/d/1xFYprEaF47_uiNHo4JQJevpVV6v5mG2v6mZXy93MZQA') # \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nsystem_2 = load_document_text('https://docs.google.com/document/d/12nLPgHv_HJMPnuGWlWVhOne9dH9-04cLSyusO0AVQ9o') # \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\nsystem_3 = load_document_text('https://docs.google.com/document/d/1oY6-HEfL5NDvnvWaxrW_HqAs0tMX0ogpB8I1OXbbgx0') # \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n# \u0434\u0435\u043b\u0438\u043c \u0442\u0435\u043a\u0441\u0442 \u043d\u0430 \u0447\u0430\u043d\u043a\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043d\u0443\u044e \u0431\u0430\u0437\u0443\n\nsource_chunks = []\n\nsplitter = CharacterTextSplitter(separator=\"\\n\", chunk_size=1024, chunk_overlap=0)\n\n\n\nfor chunk in splitter.split_text(database):\n\n    source_chunks.append(Document(page_content=chunk, metadata={\"meta\":\"data\"}))\n\n\n\n# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\n\nembeddings = OpenAIEmbeddings()\n\n\n\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043d\u0443\u044e \u0431\u0430\u0437\u0443 \u0438\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0442\u0435\u043a\u0441\u0442\u0430\n\ndb = FAISS.from_documents(source_chunks, embeddings)\nMODEL_GPT_3_5 = \"gpt-3.5-turbo\"\n\nMODEL_GPT_4 = \"gpt-4o\"\n\n\n\ndef create_completion(model, system, content, temperature):\n\n    messages = [\n\n        {\"role\": \"system\", \"content\": system},\n\n        {\"role\": \"user\", \"content\": content}\n\n    ]\n\n    client = OpenAI()\n\n    completion = client.chat.completions.create(\n\n        model=model,\n\n        messages=messages,\n\n        temperature=0\n\n\n\n    )\n\n    return completion.choices[0].message.content\n\n\n\ndef create_completion_with_assistant(system, user_assist, assistant, user, temp=0, model='gpt-3.5-turbo'):\n\n    messages = [\n\n        {\"role\": \"system\", \"content\": system},\n\n        {\"role\": \"user\", \"content\": user_assist},\n\n        {'role':'assistant', 'content': assistant},\n\n        {\"role\": \"user\", \"content\": f\"{user}\"}\n\n\n\n    ]\n\n    completion = openai.chat.completions.create(\n\n        model=model,\n\n        messages=messages,\n\n        temperature=temp\n\n    )\n\n    answer = completion.choices[0].message.content\n\n    return answer\n\n\n\ndef first_model(system_1, db, topic, temperature=0):\n\n    docs = db.similarity_search(topic, k=4)\n\n    message_content = ' '.join([f'\\n\u041e\u0442\u0440\u044b\u0432\u043e\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u2116{i+1}\\n=====================' + doc.page_content + '\\n' for i, doc in enumerate(docs)])\n\n    question_content = f\"\"\"\u0422\u044b - \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c \u0432 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0435 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430. \u041e\u0442\u0432\u0435\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438\n\n    \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0437\u0430\u0434\u0430\u0439 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0435\u0439 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.\n\n    \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443: {message_content}\\n\\n\u0412\u043e\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: \\n{topic}\"\"\"\n\n    return fill(create_completion(MODEL_GPT_3_5, system_1, question_content, 0))\n\n\n\ndef second_model(topic):\n\n    user_assist = \"\"\"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438, \u0431\u044b\u043b\u0438 \u043b\u0438 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u044b \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u0438 \u0432\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435: \u0432 \u0442\u0440\u0443\u0434\u043e\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435, \u0432 \u0440\u043e\u0441\u0442\u0435 \u0434\u043e\u0445\u043e\u0434\u0430,\n\n                \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e, \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u0444\u0435\u0440\u0435 IT, \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0432 \u043a\u0430\u0440\u044c\u0435\u0440\u043d\u043e\u043c \u0440\u043e\u0441\u0442\u0435, \u0432\u043e \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435,\n\n                \u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0432 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0441\u0442\u044c), \u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u043e\u0442 \u0441\u0432\u043e\u0435\u0433\u043e\n\n                \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0441\u0442\u044c), \u0432 \u0443\u0432\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0445\u043e\u0431\u0431\u0438, \u0432 \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u043d\u043e\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435.  \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e \u0442\u0430\u043a\u0438\u0435:\n\n                \u043d\u0435 \u0443\u043c\u0435\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043d\u0435 \u0437\u043d\u0430\u044e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443, \u043d\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u0443\u0440\u0441 \u0434\u043e\u0440\u043e\u0433\u043e \u0441\u0442\u043e\u0438\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435. \u0421\u0432\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u0442\u044b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435:\n\n                \u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438:  \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f:\n\n                \u0422\u043e, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b \u043a\u043b\u0438\u0435\u043d\u0442: '\u041c\u043d\u0435 \u0431\u044b \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e, \u044f \u0441\u0435\u0439\u0447\u0430\u0441 \u0440\u0430\u0431\u043e\u0442\u0430\u044e \u043c\u0435\u0434\u0441\u0435\u0441\u0442\u0440\u043e\u0439, \u043d\u043e \u0445\u043e\u0447\u0443 \u043f\u0435\u0440\u0435\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u043a\u0435, \u0438\u0437 \u0434\u043e\u043c\u0430.\n\n                \u0412\u043e\u043f\u0440\u043e\u0441 - \u0441\u043c\u043e\u0433\u0443 \u043b\u0438 \u044f, \u0432\u0435\u0434\u044c \u0443 \u043c\u0435\u043d\u044f \u043d\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0444\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u044f \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043b\u0430, \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435 \u043f\u043e\u043c\u043d\u044e'\"\"\"\n\n    assistant = \"\"\"\u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438: \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f: \u043d\u0435 \u0443\u043c\u0435\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043d\u0435 \u0437\u043d\u0430\u044e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443\"\"\"\n\n    user = f\"\"\"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438, \u0431\u044b\u043b\u0438 \u043b\u0438 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u044b \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u0438 \u0432\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435: \u0432 \u0442\u0440\u0443\u0434\u043e\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435, \u0432 \u0440\u043e\u0441\u0442\u0435 \u0434\u043e\u0445\u043e\u0434\u0430,\n\n                \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e, \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u0444\u0435\u0440\u0435 IT, \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0432 \u043a\u0430\u0440\u044c\u0435\u0440\u043d\u043e\u043c \u0440\u043e\u0441\u0442\u0435, \u0432\u043e \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435,\n\n                \u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0432 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0441\u0442\u044c), \u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u043e\u0442 \u0441\u0432\u043e\u0435\u0433\u043e\n\n                \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0441\u0442\u044c), \u0432 \u0443\u0432\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0445\u043e\u0431\u0431\u0438, \u0432 \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u043d\u043e\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435.  \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e \u0442\u0430\u043a\u0438\u0435: \u043d\u0435 \u0443\u043c\u0435\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c,\n\n                \u043d\u0435 \u0437\u043d\u0430\u044e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443, \u043d\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u0443\u0440\u0441 \u0434\u043e\u0440\u043e\u0433\u043e \u0441\u0442\u043e\u0438\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435. \u0421\u0432\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u0442\u044b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435: \u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438:  \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f:\n\n                \u0422\u043e, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b \u043a\u043b\u0438\u0435\u043d\u0442: '{topic}'\"\"\"\n\n\n\n    return create_completion_with_assistant(system_2, user_assist, assistant, user, temp=0, model=MODEL_GPT_3_5)\n\n\n\ndef third_model(system_3, db, topic, user_needs):\n\n    docs = db.similarity_search(topic, k=4)\n\n    message_content = ' '.join([f'\\n\u041e\u0442\u0440\u044b\u0432\u043e\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u2116{i+1}\\n=====================' + doc.page_content + '\\n' for i, doc in enumerate(docs)])\n\n    input_text = f\"\"\"\u0422\u044b - \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c \u0432 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0435 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430. \u041e\u0442\u0432\u0435\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445\n\n    \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u043e \u043d\u0430 \u0441\u0430\u043c\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u0441\u0441\u044b\u043b\u0430\u0439\u0441\u044f, \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u043e \u043d\u0438\u0445 \u0437\u043d\u0430\u0442\u044c. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443: {message_content}\\n\\n\n\n    \u0435\u0441\u043b\u0438 \u0432 \u043e\u0442\u0447\u0435\u0442\u0435 \u043e \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u0445 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0442\u0430\u0440\u0438\u0444.\n\n    \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0435\u0442 - \u0437\u0430\u0434\u0430\u0432\u0430\u0439 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0435\u0439.\n\n    \u041e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: {user_needs} \\n\\n\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0432\u043e\u043f\u0440\u043e\u0441: {topic}\"\"\"\n\n    answer_text = create_completion(MODEL_GPT_3_5, system_3, input_text, 0)\n\n    return fill(answer_text)", "metadata": {"subid": 1, "total": 3, "source": "https://colab.research.google.com/drive/17dBuuXGvtHfu7hxgsCuuDEnWymbnxGr6?usp=sharing"}}}, {"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\n\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043a\u0430\u043a \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044f:\nuser_assist = \"\"\"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438, \u0431\u044b\u043b\u0438 \u043b\u0438 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u044b \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u0438 \u0432\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435: \u0432 \u0442\u0440\u0443\u0434\u043e\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435, \u0432 \u0440\u043e\u0441\u0442\u0435 \u0434\u043e\u0445\u043e\u0434\u0430,\n\n                \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e, \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u0444\u0435\u0440\u0435 IT, \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0432 \u043a\u0430\u0440\u044c\u0435\u0440\u043d\u043e\u043c \u0440\u043e\u0441\u0442\u0435, \u0432\u043e \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435,\n\n                \u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0432 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0441\u0442\u044c), \u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u043e\u0442 \u0441\u0432\u043e\u0435\u0433\u043e\n\n                \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0441\u0442\u044c), \u0432 \u0443\u0432\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0445\u043e\u0431\u0431\u0438, \u0432 \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u043d\u043e\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435.  \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e \u0442\u0430\u043a\u0438\u0435: \u043d\u0435 \u0443\u043c\u0435\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c,\n\n                \u043d\u0435 \u0437\u043d\u0430\u044e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443, \u043d\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u0443\u0440\u0441 \u0434\u043e\u0440\u043e\u0433\u043e \u0441\u0442\u043e\u0438\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435. \u0421\u0432\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u0442\u044b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435: \u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438:  \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f:\n\n                \u0422\u043e, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b \u043a\u043b\u0438\u0435\u043d\u0442: '\u041c\u043d\u0435 \u0431\u044b \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e, \u044f \u0441\u0435\u0439\u0447\u0430\u0441 \u0440\u0430\u0431\u043e\u0442\u0430\u044e \u043c\u0435\u0434\u0441\u0435\u0441\u0442\u0440\u043e\u0439, \u043d\u043e \u0445\u043e\u0447\u0443 \u043f\u0435\u0440\u0435\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u043a\u0435, \u0438\u0437 \u0434\u043e\u043c\u0430.\n\n                \u0412\u043e\u043f\u0440\u043e\u0441 - \u0441\u043c\u043e\u0433\u0443 \u043b\u0438 \u044f, \u0432\u0435\u0434\u044c \u0443 \u043c\u0435\u043d\u044f \u043d\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0444\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f, \u044f \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043b\u0430, \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435 \u043f\u043e\u043c\u043d\u044e'\"\"\"\n\nassistant = \"\"\"\u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438: \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e. \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f: \u043d\u0435 \u0443\u043c\u0435\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043d\u0435 \u0437\u043d\u0430\u044e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443. \"\"\"\n\n\n\ntopic = \"\"\"\u041c\u043d\u0435 \u0431\u044b \u0445\u043e\u0442\u0435\u043b\u043e\u0441\u044c \u0441\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u043c \u0438 \u0443\u0439\u0442\u0438 \u0441 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u044f \u0440\u0430\u0431\u043e\u0442\u0430\u044e full time, \u0443 \u043c\u0435\u043d\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0445\u0432\u0430\u0442\u0430\u0442\u044c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0430 \u0443\u0447\u0435\u0431\u0443\"\"\"\n\nuser = f\"\"\"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438, \u0431\u044b\u043b\u0438 \u043b\u0438 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u044b \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u0438 \u0432\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435: \u0432 \u0442\u0440\u0443\u0434\u043e\u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0435, \u0432 \u0440\u043e\u0441\u0442\u0435 \u0434\u043e\u0445\u043e\u0434\u0430,\n\n                \u0432 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u043e, \u0440\u0430\u0437\u0432\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u0441\u0444\u0435\u0440\u0435 IT, \u0441\u043c\u0435\u043d\u0438\u0442\u044c \u0434\u0435\u044f\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u0432 \u043a\u0430\u0440\u044c\u0435\u0440\u043d\u043e\u043c \u0440\u043e\u0441\u0442\u0435, \u0432\u043e \u0444\u0440\u0438\u043b\u0430\u043d\u0441\u0435,\n\n                \u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0432 \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0441\u0442\u044c), \u0432 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043f\u0440\u0438\u0431\u044b\u043b\u0438 \u043e\u0442 \u0441\u0432\u043e\u0435\u0433\u043e\n\n                \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0435\u0441\u043b\u0438 \u043e\u043d \u0435\u0441\u0442\u044c), \u0432 \u0443\u0432\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0445\u043e\u0431\u0431\u0438, \u0432 \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u043d\u043e\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435.  \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e \u0442\u0430\u043a\u0438\u0435: \u043d\u0435 \u0443\u043c\u0435\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c,\n\n                \u043d\u0435 \u0437\u043d\u0430\u044e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443, \u043d\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u0443\u0440\u0441 \u0434\u043e\u0440\u043e\u0433\u043e \u0441\u0442\u043e\u0438\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435. \u0421\u0432\u043e\u0439 \u043e\u0442\u0432\u0435\u0442 \u0442\u044b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435: \u041f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438:  \u0412\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f:\n\n                \u0422\u043e, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b \u043a\u043b\u0438\u0435\u043d\u0442: '{topic}'\"\"\"\n\nans = create_completion_with_assistant(system_2, user_assist, assistant, user, temp=0, model=MODEL_GPT_3_5)\nans\ndef run_dialog():\n\n    clients_needs = \"\"\n\n    topic = input('\u041a\u043b\u0438\u0435\u043d\u0442: ')\n\n    answer_1 = first_model(system_1, db, topic, temperature=0)\n\n    answer_2 = second_model(topic)\n\n    clients_needs += answer_2\n\n    print('\\n\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440: ', answer_1)\n\n    print(\"------------------\")\n\n    print(\"\u043e\u0442\u0432\u0435\u0442 2 \u043c\u043e\u0434\u0435\u043b\u0438:\", answer_2)\n\n\n\n    while True:\n\n        topic = input('\u041a\u043b\u0438\u0435\u043d\u0442: ')\n\n        if topic.lower() == 'stop':\n\n            break\n\n        answer_3 = third_model(system_3, db, topic, clients_needs)\n\n        answer_2 = second_model(topic)\n\n        clients_needs += answer_2\n\n        print('\\n\u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440: ', answer_3)\n\n        print(\"------------------\")\n\n        print(\"\u043e\u0442\u0432\u0435\u0442 2 \u043c\u043e\u0434\u0435\u043b\u0438:\", answer_2)\n\n        print(\"------------------\")\n\n        print(\"\u0412\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0438 \u0438 \u0432\u043e\u0437\u0440\u0430\u0436\u0435\u043d\u0438\u044f\", clients_needs)\n\n        print(\"------------------\")\n\n\n\n    return\n\n\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0440\u043e\u0434\u0430\u0436\u043d\u0438\u043a\u0430 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 gpt3.5\nrun_dialog()\nrun_dialog()\n\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u0440\u043e\u0434\u0430\u0436\u043d\u0438\u043a\u0430 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 gpt4o\ndef third_model(system_3, db, topic, user_needs):\n\n    docs = db.similarity_search(topic, k=4)\n\n    message_content = ' '.join([f'\\n\u041e\u0442\u0440\u044b\u0432\u043e\u043a \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u2116{i+1}\\n=====================' + doc.page_content + '\\n' for i, doc in enumerate(docs)])\n\n    input_text = f\"\"\"\u0422\u044b - \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c \u0432 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0435 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0430. \u041e\u0442\u0432\u0435\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445\n\n    \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u043e \u043d\u0430 \u0441\u0430\u043c\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u043d\u0435 \u0441\u0441\u044b\u043b\u0430\u0439\u0441\u044f, \u043a\u043b\u0438\u0435\u043d\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u043e \u043d\u0438\u0445 \u0437\u043d\u0430\u0442\u044c. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443: {message_content}\\n\\n\n\n    \u0435\u0441\u043b\u0438 \u0432 \u043e\u0442\u0447\u0435\u0442\u0435 \u043e \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u0445 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0442\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0442\u0430\u0440\u0438\u0444.\n\n    \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043d\u0435\u0442 - \u0437\u0430\u0434\u0430\u0432\u0430\u0439 \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u0435\u0439.\n\n    \u041e\u0442\u0447\u0435\u0442 \u043e \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u043d\u043e\u0441\u0442\u044f\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: {user_needs} \\n\\n\u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0432\u043e\u043f\u0440\u043e\u0441: {topic}\"\"\"\n\n    answer_text = create_completion(MODEL_GPT_4, system_3, input_text, 0)\n\n    return fill(answer_text)\nrun_dialog()", "metadata": {"subid": 2, "total": 3, "source": "https://colab.research.google.com/drive/17dBuuXGvtHfu7hxgsCuuDEnWymbnxGr6?usp=sharing"}}}]